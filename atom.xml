<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵子骞COVER的BLOG</title>
  
  <subtitle>赵子骞COVER的BLOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhaoziqian.top/"/>
  <updated>2018-08-23T03:46:12.233Z</updated>
  <id>http://zhaoziqian.top/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Hyperledger Composer 系列三】使用本地Fabric区块链网络与Composer交互</title>
    <link href="http://zhaoziqian.top/2018/08/23/%E3%80%90Hyperledger-Composer-%E7%B3%BB%E5%88%97%E4%B8%89%E3%80%91%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0Fabric%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BD%91%E7%BB%9C%E4%B8%8EComposer%E4%BA%A4%E4%BA%92/"/>
    <id>http://zhaoziqian.top/2018/08/23/【Hyperledger-Composer-系列三】使用本地Fabric区块链网络与Composer交互/</id>
    <published>2018-08-23T03:44:47.000Z</published>
    <updated>2018-08-23T03:46:12.233Z</updated>
    
    <content type="html"><![CDATA[<h3 id="将该网络部署到本地-Hyperledger-Fabric"><a href="#将该网络部署到本地-Hyperledger-Fabric" class="headerlink" title="将该网络部署到本地 Hyperledger Fabric"></a>将该网络部署到本地 Hyperledger Fabric</h3><ol><li>获取 Hyperledger Fabric</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir ~/HyperledgerComposer</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> COMPOSER_ROOT=~/HyperledgerComposer</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="variable">$COMPOSER_ROOT</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir fabric-dev-servers &amp;&amp; <span class="built_in">cd</span> fabric-dev-servers</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -O https://raw.githubusercontent.com/hyperledger/composer-tools/master/packages/fabric-dev-servers/fabric-dev-servers.zip</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install unzip</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> unzip fabric-dev-servers.zip</span></span><br></pre></td></tr></table></figure><p>ps. 如果下载不下来，请翻墙，或者使用别的下载工具</p><p>因为是新环境没有安装docker</p><p>先安装docker <a href="http://zhaoziqian.top/2018/08/22/ubuntu-18-04-docker-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">安装方法</a></p><p>第一次，请依照顺序执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cd $COMPOSER_ROOT/fabric-dev-servers</span><br><span class="line"></span><br><span class="line">## 获取fabric镜像</span><br><span class="line">$ ./downloadFabric.sh</span><br><span class="line"></span><br><span class="line">## 启动fabric网络，创建通道，加入通道</span><br><span class="line">$ ./startFabric.sh</span><br><span class="line"></span><br><span class="line">## 使用composer 创建 PeerAdminCard</span><br><span class="line">$ ./createPeerAdminCard.sh</span><br></pre></td></tr></table></figure></p><p>执行完<code>./createPeerAdminCard.sh</code>后会有如下输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Development only script for Hyperledger Fabric control</span><br><span class="line">Running &apos;createPeerAdminCard.sh&apos;</span><br><span class="line">FABRIC_VERSION is unset, assuming hlfv12</span><br><span class="line">FABRIC_START_TIMEOUT is unset, assuming 15 (seconds)</span><br><span class="line"></span><br><span class="line">Using composer-cli at v0.20.0</span><br><span class="line"></span><br><span class="line">Successfully created business network card file to</span><br><span class="line">Output file: /tmp/PeerAdmin@hlfv1.card</span><br><span class="line"></span><br><span class="line">Command succeeded</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Successfully imported business network card</span><br><span class="line">Card file: /tmp/PeerAdmin@hlfv1.card</span><br><span class="line">Card name: PeerAdmin@hlfv1</span><br><span class="line"></span><br><span class="line">Command succeeded</span><br><span class="line"></span><br><span class="line">The following Business Network Cards are available:</span><br><span class="line"></span><br><span class="line">Connection Profile: hlfv1</span><br><span class="line">┌─────────────────┬───────────┬──────────────────┐</span><br><span class="line">│ Card Name       │ UserId    │ Business Network │</span><br><span class="line">├─────────────────┼───────────┼──────────────────┤</span><br><span class="line">│ PeerAdmin@hlfv1 │ PeerAdmin │                  │</span><br><span class="line">└─────────────────┴───────────┴──────────────────┘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Issue composer card list --card &lt;Card Name&gt; to get details a specific card</span><br><span class="line"></span><br><span class="line">Command succeeded</span><br><span class="line"></span><br><span class="line">Hyperledger Composer PeerAdmin card has been imported, host of fabric specified as &apos;localhost&apos;</span><br></pre></td></tr></table></figure><p>在fabric网络中，只用执行一次<code>./createPeerAdminCard.sh</code>，停止网络使用脚本<code>stopFabric.sh</code>，启动使用<code>startFabric.sh</code></p><ol start="3"><li>部署到 Hyperledger Fabric</li></ol><p>部署在【Hyperledger Composer 系列二】中使用的 Perishable Goods 网络，有完整版的工程为<code>iot-perishable-network</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd $COMPOSER_ROOT/developerWorks/iot-perishable-network</span><br><span class="line">$ composer network deploy -a dist/iot-perishable-network.bna -A admin -S adminpw -c PeerAdmin@hlfv1 -f networkadmin.card</span><br><span class="line">$ composer card import --file networkadmin.card</span><br></pre></td></tr></table></figure><p>在使用<code>$ composer network deploy -a dist/iot-perishable-network.bna -A admin -S adminpw -c PeerAdmin@hlfv1 -f networkadmin.card</code>这条命令的时候报错，第一次原因发现，<a href="mailto:``composer@0.20.0" target="_blank" rel="noopener">``composer@0.20.0</a><code>版本中没有</code>composer network deploy<code>这个子命令，之后降级版本到</code><a href="mailto:composer@0.15.0" target="_blank" rel="noopener">composer@0.15.0</a><code>依然不成功。分析原因应该是对</code>fabric<code></code>环境的版本有要求。</p><table><thead><tr><th>composer版本</th><th>fabric区块链网络版本</th></tr></thead><tbody><tr><td>v0.15.0</td><td>1.0.4</td></tr><tr><td>v0.17.0</td><td>1.1.0</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ./teardownAllDocker.sh </span><br><span class="line">## 然后输入1删除container</span><br><span class="line"></span><br><span class="line">$ export FABRIC_VERSION=hlfv1</span><br><span class="line"></span><br><span class="line">$ ./downloadFabric.sh</span><br><span class="line"></span><br><span class="line">$ ./startFabric.sh</span><br></pre></td></tr></table></figure><p>为了防止错误，可能需要重新创建PeerAdminCard<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## 获取card name</span><br><span class="line">$ composer card list </span><br><span class="line"></span><br><span class="line">## 删除对应的card</span><br><span class="line">$ composer card delete -n $&#123;card name&#125;</span><br><span class="line"></span><br><span class="line">$ ./createPeerAdminCard.sh</span><br></pre></td></tr></table></figure></p><p>完成以上工作后，再次执行下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd $COMPOSER_ROOT/developerWorks/iot-perishable-network</span><br><span class="line">$ composer network deploy -a dist/iot-perishable-network.bna -A admin -S adminpw -c PeerAdmin@hlfv1 -f networkadmin.card</span><br><span class="line">$ composer card import --file networkadmin.card</span><br></pre></td></tr></table></figure><p>这次在执行<code>$ composer network deploy -a dist/iot-perishable-network.bna -A admin -S adminpw -c PeerAdmin@hlfv1 -f networkadmin.card</code>后结果正常，返回信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Deploying business network from archive: dist/iot-perishable-network.bna</span><br><span class="line">Business network definition:</span><br><span class="line">Identifier: iot-perishable-network@0.1.12</span><br><span class="line">Description: Shipping Perishable Goods Business Network</span><br><span class="line"></span><br><span class="line">✔ Deploying business network definition. This may take a minute...</span><br><span class="line">Successfully created business network card to networkadmin.card</span><br><span class="line"></span><br><span class="line">Command succeeded</span><br></pre></td></tr></table></figure><blockquote><p>composer network deploy 命令将指定的网络归档 (dist/iot-perishable-network.bna) 部署到本地 Hyperledger Fabric，使用您之前在运行 createPeerAdminCard.sh 脚本时创建的 PeerAdmin 卡来执行身份验证。完成部署时，会为网络管理员发放一个 ID 卡，网络管理员的凭证（即 userid 和密码（或密钥））存储在 networkadmin.card 文件中。</p></blockquote><p>执行<code>$ composer card import --file networkadmin.card</code>返回信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Successfully imported business network card: admin@iot-perishable-network</span><br><span class="line"></span><br><span class="line">Command succeeded</span><br></pre></td></tr></table></figure><blockquote><p>composer card import 命令告诉 Hyperledger Composer 导入指定的卡文件，之后可利用该文件来验证在该卡中存储了凭证的用户。在本例中，该卡是网络管理员的。</p></blockquote><h3 id="通过-Composer-REST-接口与网络进行交互"><a href="#通过-Composer-REST-接口与网络进行交互" class="headerlink" title="通过 Composer REST 接口与网络进行交互"></a>通过 Composer REST 接口与网络进行交互</h3><ol><li>安装 Composer REST 接口生成器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g composer-rest-server</span><br><span class="line">## 根据之前的经验，这里安装的最新版本可能不好用</span><br><span class="line"></span><br><span class="line">## 找一下和composer-cli 版本相同的，只有安装</span><br><span class="line">$ npm info composer-rest-server@0.15.0</span><br><span class="line"></span><br><span class="line">$ npm install -g composer-rest-server@0.15.0</span><br><span class="line"></span><br><span class="line">$ composer-rest-server -v</span><br><span class="line">v0.15.0</span><br></pre></td></tr></table></figure><ol start="2"><li>生成 REST 接口</li></ol><p>在生成 REST 接口之前，确保 Hyperledger Fabric 正在运行且 <code>iot-perishable-network</code> 已部署（否则会没有连接目标）。从命令行运行 <code>composer-rest-server</code> 命令。系统会提示输入相关信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ composer-rest-server</span><br><span class="line">? Enter the name of the business network card to use: admin@iot-perishable-network</span><br><span class="line">? Specify if you want namespaces in the generated REST API: always use namespaces</span><br><span class="line">? Specify if you want to enable authentication for the REST API using Passport: No</span><br><span class="line">? Specify if you want to enable event publication over WebSockets: No</span><br><span class="line">? Specify if you want to enable TLS security for the REST API: No</span><br><span class="line"></span><br><span class="line">To restart the REST server using the same options, issue the following command:</span><br><span class="line">   composer-rest-server -c admin@iot-perishable-network -n always</span><br><span class="line"></span><br><span class="line">Discovering types from business network definition ...</span><br><span class="line">Discovered types from business network definition</span><br><span class="line">Generating schemas for all types in business network definition ...</span><br><span class="line">Generated schemas for all types in business network definition</span><br><span class="line">Adding schemas for all types to Loopback ...</span><br><span class="line">Added schemas for all types to Loopback</span><br><span class="line">Web server listening at: http://localhost:3000</span><br><span class="line">Browse your REST API at http://localhost:3000/explorer</span><br></pre></td></tr></table></figure><p>REST 服务器需要知道如何向 Hyperledger Fabric 执行身份验证，以便与业务网络进行通信。您需要提供一个 ID 卡来实现此目的。</p><p>命名空间有助于避免名称冲突。</p><p>使用 REST 接口执行测试时，暂时无需担心身份验证、事件和 WebSocket或 TLS 安全性。</p><p>下次使用时，只需要使用命令<code>composer-rest-server -c admin@iot-perishable-network -n always</code>可以跳过前面的问题</p><p>完成以上，就可以使用浏览器访问，查看REST API</p><ol start="3"><li>使用 REST 接口</li></ol><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-23/1972330.jpg" alt="image"></p><p>选择 <code>setupDemo</code> 的 <code>POST API</code> 点击 <code>try it</code><br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-23/207277.jpg" alt="image"></p><p>以上就完成了composer与本地fabric网络的结合部署，并且使用composer-rest-server使用api接口交互。</p><p>笔者会继续研究fabric 和 composer 的用法。继续更新</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;将该网络部署到本地-Hyperledger-Fabric&quot;&gt;&lt;a href=&quot;#将该网络部署到本地-Hyperledger-Fabric&quot; class=&quot;headerlink&quot; title=&quot;将该网络部署到本地 Hyperledger Fabric&quot;&gt;&lt;/a&gt;将该
      
    
    </summary>
    
      <category term="区块链" scheme="http://zhaoziqian.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://zhaoziqian.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="Hyperledger Composer" scheme="http://zhaoziqian.top/tags/Hyperledger-Composer/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 18.04 docker 环境搭建</title>
    <link href="http://zhaoziqian.top/2018/08/22/ubuntu-18-04-docker-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://zhaoziqian.top/2018/08/22/ubuntu-18-04-docker-环境搭建/</id>
    <published>2018-08-22T07:43:59.000Z</published>
    <updated>2018-08-22T07:45:35.140Z</updated>
    
    <content type="html"><![CDATA[<p>从官网简单摘录了安装docker环境和docker-compose所需要执行的命令，亲测有效</p><ol><li>删除旧版本docker</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io</span><br></pre></td></tr></table></figure><ol start="2"><li>安装docker </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br><span class="line">    </span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"></span><br><span class="line">$ sudo add-apt-repository \</span><br><span class="line">   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line">   $(lsb_release -cs) \</span><br><span class="line">   stable&quot;</span><br><span class="line"></span><br><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install docker-ce</span><br><span class="line"></span><br><span class="line">$ docker version</span><br></pre></td></tr></table></figure><p>安装完使用时发现用户没有权限使用如下方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br><span class="line"></span><br><span class="line">$ sudo gpasswd -a $USER docker</span><br><span class="line"></span><br><span class="line">$ newgrp docker</span><br><span class="line"></span><br><span class="line">$ docker ps</span><br></pre></td></tr></table></figure><ol start="3"><li>安装docker compose</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">$ sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从官网简单摘录了安装docker环境和docker-compose所需要执行的命令，亲测有效&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;删除旧版本docker&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="docker" scheme="http://zhaoziqian.top/categories/docker/"/>
    
    
      <category term="docker" scheme="http://zhaoziqian.top/tags/docker/"/>
    
      <category term="linux" scheme="http://zhaoziqian.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【Hyperledger Composer 系列二】Ubuntu 安装Composer 并导入IBM Cloud</title>
    <link href="http://zhaoziqian.top/2018/08/22/%E3%80%90Hyperledger-Composer-%E7%B3%BB%E5%88%97%E4%BA%8C%E3%80%91Ubuntu-%E5%AE%89%E8%A3%85Composer-%E5%B9%B6%E5%AF%BC%E5%85%A5IBM-Cloud/"/>
    <id>http://zhaoziqian.top/2018/08/22/【Hyperledger-Composer-系列二】Ubuntu-安装Composer-并导入IBM-Cloud/</id>
    <published>2018-08-22T02:42:39.000Z</published>
    <updated>2018-08-22T02:46:04.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="【Hyperledger-Composer-系列二】Ubuntu-安装Composer-并导入IBM-Cloud"><a href="#【Hyperledger-Composer-系列二】Ubuntu-安装Composer-并导入IBM-Cloud" class="headerlink" title="【Hyperledger Composer 系列二】Ubuntu 安装Composer 并导入IBM Cloud"></a>【Hyperledger Composer 系列二】Ubuntu 安装Composer 并导入IBM Cloud</h2><hr><h4 id="环境基础"><a href="#环境基础" class="headerlink" title="环境基础"></a>环境基础</h4><p>因为 Composer 目前支持吃 ubuntu 和 MacOS 所以本文选择使用ubuntu 虚拟机作为基础环境演示。</p><p>使用 Ubuntu 18.04 版本。</p><p>现在有了ubuntu环境开始正式的 composer 安装工作</p><ol><li>安装python</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install python</span><br></pre></td></tr></table></figure><ol start="2"><li><p>安装nvm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br><span class="line">$ source ~/.bashrc</span><br><span class="line">$ command -v nvm</span><br><span class="line">## 成功会返回nvm 失败什么也没有</span><br></pre></td></tr></table></figure></li><li><p>安装node</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install --lts</span><br></pre></td></tr></table></figure><ol start="4"><li>安装composer 命令行工具</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install g++</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install cmake</span><br><span class="line"></span><br><span class="line">$ npm i npm@latest -g</span><br><span class="line"></span><br><span class="line">$ npm install -g composer-cli</span><br><span class="line"></span><br><span class="line">$ composer -v</span><br><span class="line">v0.20.0</span><br></pre></td></tr></table></figure><ol start="5"><li>安装vscode （非必须）<br>这是官方推荐的IDE，应为这个IDE支持composer语法的插件，非必须安装。</li></ol><p>我是安装在我的宿主机上。应为ubuntu虚拟机使用的是服务器版本。</p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-21/88333609.jpg" alt="image"></p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-21/51063153.jpg" alt="image"></p><p>做完以上，运行环境就准备完毕了</p><h4 id="运行构建"><a href="#运行构建" class="headerlink" title="运行构建"></a>运行构建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ~/hyperledgerComposer</span><br><span class="line">$ export COMPOSER_ROOT=~/HyperledgerComposer</span><br><span class="line">$ cd $COMPOSER_ROOT</span><br><span class="line">$ git clone https://github.com/makotogo/developerWorks.git</span><br></pre></td></tr></table></figure><p>现在已经拿到工程代码，可以开始构建和测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd $COMPOSER_ROOT/developerWorks/perishable-network</span><br><span class="line">$ npm install &amp;&amp; npm test</span><br></pre></td></tr></table></figure><p>执行后有大量日志。最后会看到如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Perishable Shipping Network</span><br><span class="line">    #shipment</span><br><span class="line">Adding temperature 4.5 to shipment SHIP_001</span><br><span class="line">Received at: Tue Aug 21 2018 07:14:40 GMT+0000 (UTC)</span><br><span class="line">Contract arrivalDateTime: Wed Aug 22 2018 07:14:40 GMT+0000 (UTC)</span><br><span class="line">Lowest temp reading: 4.5</span><br><span class="line">Highest temp reading: 4.5</span><br><span class="line">Payout: 2500</span><br><span class="line">Grower: farmer@email.com new balance: 2500</span><br><span class="line">Importer: supermarket@email.com new balance: -2500</span><br><span class="line">      ✓ should receive base price for a shipment within temperature range (121ms)</span><br><span class="line">Adding temperature 1 to shipment SHIP_001</span><br><span class="line">Received at: Tue Aug 21 2018 07:14:40 GMT+0000 (UTC)</span><br><span class="line">Contract arrivalDateTime: Wed Aug 22 2018 07:14:40 GMT+0000 (UTC)</span><br><span class="line">Lowest temp reading: 1</span><br><span class="line">Highest temp reading: 4.5</span><br><span class="line">Min temp penalty: 0.2</span><br><span class="line">Payout: 1500</span><br><span class="line">Grower: farmer@email.com new balance: 4000</span><br><span class="line">Importer: supermarket@email.com new balance: -4000</span><br><span class="line">      ✓ should apply penalty for min temperature violation (107ms)</span><br><span class="line">Adding temperature 11 to shipment SHIP_001</span><br><span class="line">Received at: Tue Aug 21 2018 07:14:40 GMT+0000 (UTC)</span><br><span class="line">Contract arrivalDateTime: Wed Aug 22 2018 07:14:40 GMT+0000 (UTC)</span><br><span class="line">Lowest temp reading: 1</span><br><span class="line">Highest temp reading: 11</span><br><span class="line">Min temp penalty: 0.2</span><br><span class="line">Max temp penalty: 0.30000000000000004</span><br><span class="line">Payout: 999.9999999999998</span><br><span class="line">Grower: farmer@email.com new balance: 5000</span><br><span class="line">Importer: supermarket@email.com new balance: -5000</span><br><span class="line">      ✓ should apply penalty for max temperature violation (111ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  3 passing (1s)</span><br></pre></td></tr></table></figure><p>以上日志描述成功操作三笔交易</p><h4 id="完善-Perishable-Goods-业务网络"><a href="#完善-Perishable-Goods-业务网络" class="headerlink" title="完善 Perishable Goods 业务网络"></a>完善 Perishable Goods 业务网络</h4><blockquote><p>Perishable Goods 网络将对一个业务网络进行建模，其中包括：一个种植者、一个航运商和一个进口商。具体细节都包含在 README.md 文件中。此网络中各个参与者间的协议是用 CTO 建模语言来建模的，并通过 JavaScript 编写的链代码（智能合约）执行。</p><p>这里演示给 Perishable Goods 这个示例网络增加功能</p><p>向货物集装箱中添加了一个 IoT GPS 传感器来提供集装箱船的位置。系统会询问您是否将从此传感器获得的读数添加到网络模型，并在船舶到达目的地时发送一个事件。</p><p>要将 GPS 传感器添加到网络模型中，需要更改业务模型并编写更多单元测试。使用一个名为 Cucumber 的工具编写它们，该工具拥有人类更容易理解的语法，而且同样非常强大。</p></blockquote><p>因为我没有使用桌面版ubuntu，所以在宿主机上使用VScode修改完代码，在上传到虚拟机中。</p><p>修改 <code>vi ~/$COMPOSER_ROOT/developerWorks/perishable-network/models/perishable.cto</code>文件</p><p>将一个表示罗盘上的主要位置的新 enum 添加到 enum ShipmentStatus 下方<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Directions of the compass</span><br><span class="line"> */</span><br><span class="line">enum CompassDirection &#123;</span><br><span class="line">  o N</span><br><span class="line">  o S</span><br><span class="line">  o E</span><br><span class="line">  o W</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 TemperatureReading 事务下方添加一个新的 GpsReading 事务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * A GPS reading for a shipment.E.g. received from a device</span><br><span class="line"> * within a shipping container</span><br><span class="line"> */</span><br><span class="line">transaction GpsReading extends ShipmentTransaction &#123;</span><br><span class="line">  o String readingTime</span><br><span class="line">  o String readingDate</span><br><span class="line">  o String latitude</span><br><span class="line">  o CompassDirection latitudeDir</span><br><span class="line">  o String longitude</span><br><span class="line">  o CompassDirection longitudeDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 Shipment 资产如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">asset Shipment identified by shipmentId &#123;</span><br><span class="line">  o String shipmentId</span><br><span class="line">  o ProductType type</span><br><span class="line">  o ShipmentStatus status</span><br><span class="line">  o Long unitCount</span><br><span class="line">  o TemperatureReading[] temperatureReadings optional</span><br><span class="line">  o GpsReading[] gpsReadings optional</span><br><span class="line">  --&gt; Contract contract</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件最后增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * An event - when the temperature goes outside the agreed-upon boundaries</span><br><span class="line"> */</span><br><span class="line">event TemperatureThresholdEvent &#123;</span><br><span class="line">  o String message</span><br><span class="line">  o Double temperature</span><br><span class="line">  --&gt; Shipment shipment</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * An event - when the ship arrives at the port</span><br><span class="line"> */</span><br><span class="line">event ShipmentInPortEvent &#123;</span><br><span class="line">  o String message</span><br><span class="line">  --&gt; Shipment shipment</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–</p><p>修改 <code>vi ~/$COMPOSER_ROOT/developerWorks/perishable-network/lib/logic.js</code>文件</p><p>修改<code>temperatureReading</code>函数 第4、5、16-24行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">temperatureReading</span>(<span class="params">temperatureReading</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> shipment = temperatureReading.shipment;</span><br><span class="line">    <span class="keyword">var</span> NS = <span class="string">"org.acme.shipping.perishable"</span>;</span><br><span class="line">    <span class="keyword">var</span> contract = shipment.contract;</span><br><span class="line">    <span class="keyword">var</span> factory = getFactory();</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Adding temperature '</span> + temperatureReading.centigrade + <span class="string">' to shipment '</span> + shipment.$identifier);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (shipment.temperatureReadings) &#123;</span><br><span class="line">        shipment.temperatureReadings.push(temperatureReading);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        shipment.temperatureReadings = [temperatureReading];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (temperatureReading.centigrade &lt; contract.minTemperature ||</span><br><span class="line">        temperatureReading.centigrade &gt; contract.maxTemperature) &#123;</span><br><span class="line">        <span class="keyword">var</span> temperatureEvent = factory.newEvent(NS, <span class="string">'TemperatureThresholdEvent'</span>);</span><br><span class="line">        temperatureEvent.shipment = shipment;</span><br><span class="line">        temperatureEvent.temperature = temperatureReading.centigrade;</span><br><span class="line">        temperatureEvent.message = <span class="string">'Temperature threshold violated! Emitting TemperatureEvent for shipment: '</span> + shipment.$identifier;</span><br><span class="line">        emit(temperatureEvent);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> getAssetRegistry(NS + <span class="string">'.Shipment'</span>)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">shipmentRegistry</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// add the temp reading to the shipment</span></span><br><span class="line">            <span class="keyword">return</span> shipmentRegistry.update(shipment);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>增加函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A GPS reading has been received for a shipment</span></span><br><span class="line"><span class="comment"> * @param &#123;org.acme.shipping.perishable.GpsReading&#125; gpsReading - the GpsReading transaction</span></span><br><span class="line"><span class="comment"> * @transaction</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gpsReading</span>(<span class="params">gpsReading</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> factory = getFactory();</span><br><span class="line">    <span class="keyword">var</span> NS = <span class="string">"org.acme.shipping.perishable"</span>;</span><br><span class="line">    <span class="keyword">var</span> shipment = gpsReading.shipment;</span><br><span class="line">    <span class="keyword">var</span> PORT_OF_NEW_YORK = <span class="string">'/LAT:40.6840N/LONG:74.0062W'</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">var</span> latLong = <span class="string">'/LAT:'</span>+ gpsReading.latitude + gpsReading.latitudeDir + <span class="string">'/LONG:'</span>+</span><br><span class="line">        gpsReading.longitude + gpsReading.longitudeDir;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (shipment.gpsReadings) &#123;</span><br><span class="line">        shipment.gpsReadings.push(gpsReading);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        shipment.gpsReadings = [gpsReading];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (latLong == PORT_OF_NEW_YORK) &#123;</span><br><span class="line">        <span class="keyword">var</span> shipmentInPortEvent = factory.newEvent(NS, <span class="string">'ShipmentInPortEvent'</span>);</span><br><span class="line">        shipmentInPortEvent.shipment = shipment;</span><br><span class="line">        <span class="keyword">var</span> message = <span class="string">'Shipment has reached the destination port of '</span> + PORT_OF_NEW_YORK;</span><br><span class="line">        shipmentInPortEvent.message = message;</span><br><span class="line">        emit(shipmentInPortEvent);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> getAssetRegistry(NS + <span class="string">'.Shipment'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">shipmentRegistry</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// add the temp reading to the shipment</span></span><br><span class="line">        <span class="keyword">return</span> shipmentRegistry.update(shipment);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 Cucumber 功能测试</p><p>创建文件<code>touch ~/$COMPOSER_ROOT/developerWorks/perishable-network/feature/ iot-perishable.feature</code></p><p>文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    &#123;&quot;$class&quot;:&quot;org.acme.shipping.perishable.Importer&quot;, &quot;email&quot;:&quot;supermarket@email.com&quot;, &quot;address&quot;:&#123;&quot;$class&quot;:&quot;org.acme.shipping.perishable.Address&quot;, &quot;country&quot;:&quot;UK&quot;&#125;, &quot;accountBalance&quot;:-1500&#125;,</span><br><span class="line">    &#123;&quot;$class&quot;:&quot;org.acme.shipping.perishable.Shipper&quot;, &quot;email&quot;:&quot;shipper@email.com&quot;, &quot;address&quot;:&#123;&quot;$class&quot;:&quot;org.acme.shipping.perishable.Address&quot;, &quot;country&quot;:&quot;Panama&quot;&#125;, &quot;accountBalance&quot;:0&#125;</span><br><span class="line">    ]</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    Scenario: Test TemperatureThresholdEvent is emitted when the min temperature threshold is violated</span><br><span class="line">    When I submit the following transactions of type org.acme.shipping.perishable.TemperatureReading</span><br><span class="line">        | shipment | centigrade |</span><br><span class="line">        | SHIP_001 | 0          |</span><br><span class="line"></span><br><span class="line">    Then I should have received the following event of type org.acme.shipping.perishable.TemperatureThresholdEvent</span><br><span class="line">        | message                                                                          | temperature | shipment |</span><br><span class="line">        | Temperature threshold violated! Emitting TemperatureEvent for shipment: SHIP_001 | 0           | SHIP_001 |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scenario: Test TemperatureThresholdEvent is emitted when the max temperature threshold is violated</span><br><span class="line">    When I submit the following transactions of type org.acme.shipping.perishable.TemperatureReading</span><br><span class="line">        | shipment | centigrade |</span><br><span class="line">        | SHIP_001 | 11         |</span><br><span class="line"></span><br><span class="line">    Then I should have received the following event of type org.acme.shipping.perishable.TemperatureThresholdEvent</span><br><span class="line">        | message                                                                          | temperature | shipment |</span><br><span class="line">        | Temperature threshold violated! Emitting TemperatureEvent for shipment: SHIP_001 | 11          | SHIP_001 |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scenario: Test ShipmentInPortEvent is emitted when GpsReading indicates arrival at destination port</span><br><span class="line">    When I submit the following transaction of type org.acme.shipping.perishable.GpsReading</span><br><span class="line">        | shipment | readingTime | readingDate | latitude | latitudeDir | longitude | longitudeDir |</span><br><span class="line">        | SHIP_001 | 120000      | 20171025    | 40.6840  | N           | 74.0062   | W            |</span><br><span class="line"></span><br><span class="line">    Then I should have received the following event of type org.acme.shipping.perishable.ShipmentInPortEvent</span><br><span class="line">        | message                                                                           | shipment |</span><br><span class="line">        | Shipment has reached the destination port of /LAT:40.6840N/LONG:74.0062W | SHIP_001 |</span><br></pre></td></tr></table></figure></p><p>最后修改<code>package.json</code>文件</p><p>修改<code>test</code>如<code>&quot;test&quot;: &quot;mocha -t 0 --recursive &amp;&amp; cucumber-js&quot;</code><br>在第40行后增加下面内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;composer-cucumber-steps&quot;: &quot;^0.14.0-0&quot;,</span><br><span class="line">&quot;cucumber&quot;: &quot;^2.2.0&quot;,</span><br></pre></td></tr></table></figure></p><p>以上修改完毕后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br><span class="line">$ npm test</span><br></pre></td></tr></table></figure><p>此时可以看到测试结果的日志有所增加，内容类似如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Adding temperature 4 to shipment SHIP_001</span><br><span class="line">Adding temperature 5 to shipment SHIP_001</span><br><span class="line">Adding temperature 10 to shipment SHIP_001</span><br><span class="line">  ✔ When I submit the following transactions of type org.acme.shipping.perishable.TemperatureReading</span><br><span class="line">      | shipment | centigrade |</span><br><span class="line">      | SHIP_001 | 4          |</span><br><span class="line">      | SHIP_001 | 5          |</span><br><span class="line">      | SHIP_001 | 10         |</span><br><span class="line">  ✔ When I submit the following transaction of type org.acme.shipping.perishable.GpsReading</span><br><span class="line">      | shipment | readingTime | readingDate | latitude | latitudeDir | longitude | longitudeDir |</span><br><span class="line">      | SHIP_001 | 120000      | 20171025    | 40.6840  | N           | 74.0062   | W            |</span><br><span class="line">  ✔ Then I should have received the following event of type org.acme.shipping.perishable.ShipmentInPortEvent</span><br><span class="line">      | message                                                                  | shipment |</span><br><span class="line">      | Shipment has reached the destination port of /LAT:40.6840N/LONG:74.0062W | SHIP_001 |</span><br><span class="line"></span><br><span class="line">6 scenarios (6 passed)</span><br><span class="line">44 steps (44 passed)</span><br><span class="line">0m03.763s</span><br></pre></td></tr></table></figure><p>说明正常</p><h4 id="将修改后的网络部署到-IBM-Cloud"><a href="#将修改后的网络部署到-IBM-Cloud" class="headerlink" title="将修改后的网络部署到 IBM Cloud"></a>将修改后的网络部署到 IBM Cloud</h4><p>创建业务网络归档文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/$COMPOSER_ROOT/developerWorks/perishable-network</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h4 id="将模型导入到-IBM-Cloud-上的-Online-Playground-中"><a href="#将模型导入到-IBM-Cloud-上的-Online-Playground-中" class="headerlink" title="将模型导入到 IBM Cloud 上的 Online Playground 中"></a>将模型导入到 IBM Cloud 上的 Online Playground 中</h4><p><a href="https://note.youdao.com/" target="_blank" rel="noopener"> https://composer-playground.mybluemix.net/</a></p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-21/44212179.jpg" alt="image"></p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-21/12572474.jpg" alt="image"></p><p>使用<code>$COMPOSER_ROOT/developerWorks/perishable-network/dist</code>路径下的<code>perishable-network.bna</code>的文件</p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-21/81709611.jpg" alt="image"></p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-21/85043750.jpg" alt="image"></p><p>部署后，调用一次 setupdemo 事务，然后在创建下图事务</p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-21/5256915.jpg" alt="image"></p><p>完成以上这些步骤说明 composer网络已经成功导入IBM Cloud</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;【Hyperledger-Composer-系列二】Ubuntu-安装Composer-并导入IBM-Cloud&quot;&gt;&lt;a href=&quot;#【Hyperledger-Composer-系列二】Ubuntu-安装Composer-并导入IBM-Cloud&quot; class=
      
    
    </summary>
    
      <category term="区块链" scheme="http://zhaoziqian.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://zhaoziqian.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="Hyperledger Composer" scheme="http://zhaoziqian.top/tags/Hyperledger-Composer/"/>
    
  </entry>
  
  <entry>
    <title>【Hyperledger Composer 系列一】使用Docker 运行 Hyperledger Composer Playground</title>
    <link href="http://zhaoziqian.top/2018/08/22/%E3%80%90Hyperledger-Composer-%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%91%E4%BD%BF%E7%94%A8Docker-%E8%BF%90%E8%A1%8C-Hyperledger-Composer-Playground/"/>
    <id>http://zhaoziqian.top/2018/08/22/【Hyperledger-Composer-系列一】使用Docker-运行-Hyperledger-Composer-Playground/</id>
    <published>2018-08-22T02:34:13.000Z</published>
    <updated>2018-08-22T02:41:25.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="纯浏览器模式"><a href="#纯浏览器模式" class="headerlink" title="纯浏览器模式"></a>纯浏览器模式</h2><p>适用于了解 Composer Playground 的工作内容。应为只依赖于浏览器，是一个模拟的区块环境。只适用于学习。</p><hr><h4 id="运行-Playground"><a href="#运行-Playground" class="headerlink" title="运行 Playground"></a>运行 Playground</h4><p>docker镜像仓库地址 <a href="https://hub.docker.com/r/hyperledger/composer-playground/tags/" target="_blank" rel="noopener">https://hub.docker.com/r/hyperledger/composer-playground/tags/</a></p><p>从一个终端窗口 (Mac/Linux) 或命令提示符 (Windows) 执行此命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull hyperledger/composer-playground</span><br><span class="line"></span><br><span class="line">## 前台运行</span><br><span class="line">$ docker run --name composer-playground --publish 8080:8080 hyperledger/composer-playground</span><br><span class="line"></span><br><span class="line">## 后台运行 </span><br><span class="line">$ docker run --name composer-playground --publish 8080:8080 --detach hyperledger/composer-playground</span><br></pre></td></tr></table></figure><p>打开浏览器并访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>：</p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-20/81983606.jpg" alt="image"></p><hr><h4 id="使用Playground"><a href="#使用Playground" class="headerlink" title="使用Playground"></a>使用Playground</h4><p>点击 <code>Let&#39;s Blockchain!</code></p><p>创建一个新的网络，如下图所示：</p><ol><li>创建新的卡片<br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-20/77625691.jpg" alt="image"></li><li>选择模板<br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-20/30729998.jpg" alt="image"></li><li>修改网络名<br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-20/99047129.jpg" alt="image"></li><li>部署<br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-20/81456604.jpg" alt="image"></li><li>连接到网络<br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-20/41960143.jpg" alt="image"></li></ol><p>然后可以通过<code>REAMME.md</code>文件了解这个模板的功能描述<br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-20/91886833.jpg" alt="image"></p><p>这个模板，描述的是一个商务贸易事件。进口方委托运输方进口生产者的货物。该企业规定：在收到货物后，进口商向种植者支付单价x货物中的单位数量。 迟到的货物是免费的。货物的温度过高，或者过低都会受到罚金。</p><p>三个参与者，分别是： 生产者，进口者，运输者。<br>两种资源，分别是：合同，物流<br>三种交易时间，分别是：温度读取，货物到达，启动DEMO</p><p>以上就是创建出来的模板网络，更多细节需要各位细心阅读模板提供的几个源码文件来理解。</p><h4 id="测试网络"><a href="#测试网络" class="headerlink" title="测试网络"></a>测试网络</h4><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-20/44345927.jpg" alt="image"></p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-20/42167294.jpg" alt="image"></p><p>此时完成了依次完整的交易，可以从左侧选择项目查看每个对象处理信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;纯浏览器模式&quot;&gt;&lt;a href=&quot;#纯浏览器模式&quot; class=&quot;headerlink&quot; title=&quot;纯浏览器模式&quot;&gt;&lt;/a&gt;纯浏览器模式&lt;/h2&gt;&lt;p&gt;适用于了解 Composer Playground 的工作内容。应为只依赖于浏览器，是一个模拟的区块环境。只
      
    
    </summary>
    
      <category term="区块链" scheme="http://zhaoziqian.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://zhaoziqian.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="Hyperledger Composer" scheme="http://zhaoziqian.top/tags/Hyperledger-Composer/"/>
    
  </entry>
  
  <entry>
    <title>hyperledger fabric v1.0.6 升级到 v1.1.0</title>
    <link href="http://zhaoziqian.top/2018/08/09/hyperledger-fabric-v1-0-6-%E5%8D%87%E7%BA%A7%E5%88%B0-v1-1-0/"/>
    <id>http://zhaoziqian.top/2018/08/09/hyperledger-fabric-v1-0-6-升级到-v1-1-0/</id>
    <published>2018-08-09T09:15:52.000Z</published>
    <updated>2018-08-09T09:16:57.462Z</updated>
    
    <content type="html"><![CDATA[<p>使用的基础环境是hyperledger fabric v1.0.0中的e2e_demo示例，启动一个e2e网络。</p><hr><ol start="0"><li>准备工作</li></ol><p>启动环境方法可以参考 <a href="http://zhaoziqian.top/2018/07/23/Hyperledger-Fabric-1-1-0-%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2/">Hyperledger Fabric 1.1.0 简单部署</a></p><p>下载工程代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># git fetch origin</span><br><span class="line"># git checkout v1.0.6</span><br></pre></td></tr></table></figure></p><p>修改<code>network_setup.sh</code>脚本中指定的启动的<code>COMPOSE_FILE</code>到e2e版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#COMPOSE_FILE=docker-compose-cli.yaml</span><br><span class="line">COMPOSE_FILE_COUCH=docker-compose-couch.yaml</span><br><span class="line">COMPOSE_FILE=docker-compose-e2e.yaml</span><br></pre></td></tr></table></figure><p>事先将cli容器启动自动执行的脚本注释掉，防止重启cli容器时执行脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cli:</span><br><span class="line">    container_name: cli</span><br><span class="line">    image: hyperledger/fabric-tools</span><br><span class="line">    tty: true</span><br><span class="line">    environment:</span><br><span class="line">      - GOPATH=/opt/gopath</span><br><span class="line">      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span><br><span class="line">      - CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">      - CORE_PEER_ID=cli</span><br><span class="line">      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span><br><span class="line">      - CORE_PEER_LOCALMSPID=Org1MSP</span><br><span class="line">      - CORE_PEER_TLS_ENABLED=true</span><br><span class="line">      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt</span><br><span class="line">      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key</span><br><span class="line">      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer</span><br><span class="line">    # command: /bin/bash -c &apos;./scripts/script.sh $&#123;CHANNEL_NAME&#125;; sleep $TIMEOUT&apos;</span><br><span class="line">    volumes:</span><br><span class="line">        - /var/run/:/host/var/run/</span><br><span class="line">        - ./examples/chaincode/go/:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go</span><br><span class="line">        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/</span><br><span class="line">        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/</span><br><span class="line">        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts</span><br><span class="line">    depends_on:</span><br><span class="line">      - orderer.example.com</span><br><span class="line">      - peer0.org1.example.com</span><br><span class="line">      - peer1.org1.example.com</span><br><span class="line">      - peer0.org2.example.com</span><br><span class="line">      - peer1.org2.example.com</span><br></pre></td></tr></table></figure><p>修改<code>./base/docker-compose-base.yaml</code>文件，将区块信息本地化</p><p>修改如下所示</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">orderer.example.com:</span><br><span class="line">    container_name: orderer.example.com</span><br><span class="line">    ...略</span><br><span class="line">    volumes:</span><br><span class="line">    ...略</span><br><span class="line">    - ../dump/orderer.example.com/hyperledger/production/:/var/hyperledger/production</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">7050</span>:<span class="number">7050</span></span><br><span class="line">      </span><br><span class="line">peer0.org1.example.com:</span><br><span class="line">    container_name: peer0.org1.example.com</span><br><span class="line">    ...略</span><br><span class="line">    volumes:</span><br><span class="line">        ...略</span><br><span class="line">        - ../dump/peer0.org1.example.com/hyperledger/production/:/var/hyperledger/production/</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">7051</span>:<span class="number">7051</span></span><br><span class="line">      - <span class="number">7052</span>:<span class="number">7052</span></span><br><span class="line">      - <span class="number">7053</span>:<span class="number">7053</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 其他peer节点做类似修改</span></span><br></pre></td></tr></table></figure><p>对应将启动容器版本修改为 <code>x86_64-1.0.6</code></p><hr><ol><li>启动网络</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ./network_setup.sh up</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 启动后查看容器</span></span></span><br><span class="line">docker-compose -f docker-compose-e2e.yaml ps</span><br><span class="line">         Name                       Command               State                                     Ports</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">ca_peerOrg1              sh -c fabric-ca-server sta ...   Up      0.0.0.0:7054-&gt;7054/tcp</span><br><span class="line">ca_peerOrg2              sh -c fabric-ca-server sta ...   Up      0.0.0.0:8054-&gt;7054/tcp</span><br><span class="line">cli                      /bin/bash                        Up</span><br><span class="line">orderer.example.com      orderer                          Up      0.0.0.0:7050-&gt;7050/tcp</span><br><span class="line">peer0.org1.example.com   peer node start                  Up      0.0.0.0:7051-&gt;7051/tcp, 0.0.0.0:7052-&gt;7052/tcp, 0.0.0.0:7053-&gt;7053/tcp</span><br><span class="line">peer0.org2.example.com   peer node start                  Up      0.0.0.0:9051-&gt;7051/tcp, 0.0.0.0:9052-&gt;7052/tcp, 0.0.0.0:9053-&gt;7053/tcp</span><br><span class="line">peer1.org1.example.com   peer node start                  Up      0.0.0.0:8051-&gt;7051/tcp, 0.0.0.0:8052-&gt;7052/tcp, 0.0.0.0:8053-&gt;7053/tcp</span><br><span class="line">peer1.org2.example.com   peer node start                  Up      0.0.0.0:10051-&gt;7051/tcp, 0.0.0.0:10052-&gt;7052/tcp, 0.0.0.0:10053-&gt;7053/tcp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 因为没有在cli中执行script.sh 脚本所以需要在执行一次，是区块链网络处于工作</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker <span class="built_in">exec</span> cli ./scripts/script.sh</span></span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">2018-08-09 05:45:19.256 UTC [msp] GetLocalMSP -&gt; DEBU 001 Returning existing local MSP</span><br><span class="line">2018-08-09 05:45:19.256 UTC [msp] GetDefaultSigningIdentity -&gt; DEBU 002 Obtaining default signing identity</span><br><span class="line">2018-08-09 05:45:19.256 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 003 Using default escc</span><br><span class="line">2018-08-09 05:45:19.256 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 004 Using default vscc</span><br><span class="line">2018-08-09 05:45:19.257 UTC [msp/identity] Sign -&gt; DEBU 005 Sign: plaintext: 0A94070A6608031A0B08EFA9AFDB0510...6D7963631A0A0A0571756572790A0161</span><br><span class="line">2018-08-09 05:45:19.257 UTC [msp/identity] Sign -&gt; DEBU 006 Sign: digest: 946059E3816AAD43A63F69B65FAA97F3CC2580E31289A90C3768D3DFA0B7EABC</span><br><span class="line">Query Result: 90</span><br><span class="line">2018-08-09 05:45:35.489 UTC [main] main -&gt; INFO 007 Exiting.....</span><br><span class="line">===================== Query on PEER3 on channel 'mychannel' is successful =====================</span><br><span class="line"></span><br><span class="line">===================== All GOOD, End-2-End execution completed =====================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> _____   _   _   ____            _____   ____    _____</span><br><span class="line">| ____| | \ | | |  _ \          | ____| |___ \  | ____|</span><br><span class="line">|  _|   |  \| | | | | |  _____  |  _|     __) | |  _|</span><br><span class="line">| |___  | |\  | | |_| | |_____| | |___   / __/  | |___</span><br><span class="line">|_____| |_| \_| |____/          |_____| |_____| |_____|</span><br></pre></td></tr></table></figure><p>如上，就说明区块链网络正常工作</p><hr><ol start="2"><li>更新容器</li></ol><p>将<code>docker-compose-e2e.yaml</code>,<code>peer-base.yaml</code>,<code>docker-compose-base.yaml</code>中的容器版本修改到v1.1.0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 更新cli容器，容器里包含v1.1.0版本的 peer、orderer等工具</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker-compose -f docker-compose-e2e.yaml stop cli</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker-compose -f docker-compose-e2e.yaml up -d --no-deps cli</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 更新orderer容器</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker-compose -f docker-compose-e2e.yaml stop orderer.example.com</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker-compose -f docker-compose-e2e.yaml up -d --no-deps orderer.example.com</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 分别更新peer容器</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker ps -a | grep dev-peer | awk <span class="string">'&#123;print $1&#125;'</span> | xargs docker rm -vf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker images | grep dev-peer | awk <span class="string">'&#123;print $3&#125;'</span> | xargs docker rmi</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker ps -a --format &#123;&#123;.Names&#125;&#125; | grep -i <span class="string">'^peer'</span> | xargs docker-compose -f docker-compose-e2e.yaml stop</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker-compose -f docker-compose-e2e.yaml up -d --no-deps peer0.org1.example.com peer1.org1.example.com peer0.org2.example.com peer1.org2.example.com</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 分别更新ca容器</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker-compose -f docker-compose-e2e.yaml stop ca0 ca1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker-compose -f docker-compose-e2e.yaml up -d --no-deps ca0 ca1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker-compose -f docker-compose-e2e.yaml ps</span></span><br><span class="line">         Name                       Command               State                                     Ports</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">ca_peerOrg1              sh -c fabric-ca-server sta ...   Up      0.0.0.0:7054-&gt;7054/tcp</span><br><span class="line">ca_peerOrg2              sh -c fabric-ca-server sta ...   Up      0.0.0.0:8054-&gt;7054/tcp</span><br><span class="line">cli                      /bin/bash                        Up</span><br><span class="line">orderer.example.com      orderer                          Up      0.0.0.0:7050-&gt;7050/tcp</span><br><span class="line">peer0.org1.example.com   peer node start                  Up      0.0.0.0:7051-&gt;7051/tcp, 0.0.0.0:7052-&gt;7052/tcp, 0.0.0.0:7053-&gt;7053/tcp</span><br><span class="line">peer0.org2.example.com   peer node start                  Up      0.0.0.0:9051-&gt;7051/tcp, 0.0.0.0:9052-&gt;7052/tcp, 0.0.0.0:9053-&gt;7053/tcp</span><br><span class="line">peer1.org1.example.com   peer node start                  Up      0.0.0.0:8051-&gt;7051/tcp, 0.0.0.0:8052-&gt;7052/tcp, 0.0.0.0:8053-&gt;7053/tcp</span><br><span class="line">peer1.org2.example.com   peer node start                  Up      0.0.0.0:10051-&gt;7051/tcp, 0.0.0.0:10052-&gt;7052/tcp, 0.0.0.0:10053-&gt;7053/tcp</span><br></pre></td></tr></table></figure><hr><ol start="3"><li>更新区块信息</li></ol><p>使用cli容器操作，更新后的cli容器提供了v1.1.0版本的二进制工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker <span class="built_in">exec</span> -it cli bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 安装jq工具</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> apt-get install -y jq</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># apt-get install -y vim</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"&#123;\"mod_policy\": \"Admins\",\"value\": &#123;\"capabilities\": &#123;\"V1_1\": &#123;&#125;&#125;&#125;,\"version\": \"0\"&#125;"</span> &gt; capabilities.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#------------------------------------------------------------</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># Config update for /Channel/Orderer on testchainid</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#------------------------------------------------------------</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 1.获取config信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># setOrdererGlobals</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_LOCALMSPID=<span class="string">"OrdererMSP"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/users/Admin@example.com/msp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用的变量信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CHANNEL=testchainid</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> OUTPUT=config.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 获得config信息 使用 tls</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer channel fetch config config_block.pb -o orderer.example.com:7050 -c <span class="variable">$CHANNEL</span> --tls --cafile <span class="variable">$ORDERER_CA</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用configtxlator 解析信息 写入到json文件中</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_decode --input config_block.pb --<span class="built_in">type</span> common.Block | jq .data.data[0].payload.data.config &gt; <span class="string">"<span class="variable">$&#123;OUTPUT&#125;</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 2.修改config信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> jq -s <span class="string">'.[0] * &#123;"channel_group":&#123;"groups":&#123;"Orderer": &#123;"values": &#123;"Capabilities": .[1]&#125;&#125;&#125;&#125;&#125;'</span> config.json ./capabilities.json &gt; modified_config.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 3.创建config更新文件</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 设置变量信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CHANNEL=<span class="string">"testchainid"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ORIGINAL=config.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> MODIFIED=modified_config.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> OUTPUT=config_update_in_envelope.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用configtxlator将config.json编码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_encode --input <span class="string">"<span class="variable">$&#123;ORIGINAL&#125;</span>"</span> --<span class="built_in">type</span> common.Config &gt; original_config.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用configtxlator将modified_config.json编码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_encode --input <span class="string">"<span class="variable">$&#123;MODIFIED&#125;</span>"</span> --<span class="built_in">type</span> common.Config &gt; modified_config.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 计算更新差异</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator compute_update --channel_id <span class="string">"<span class="variable">$&#123;CHANNEL&#125;</span>"</span> --original original_config.pb --updated modified_config.pb &gt; config_update.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 解码config_update.pb 并且写入到 config_update.json</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_decode --input config_update.pb  --<span class="built_in">type</span> common.ConfigUpdate &gt; config_update.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 生成待提交信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"'</span><span class="variable">$CHANNEL</span><span class="string">'", "type":2&#125;&#125;,"data":&#123;"config_update":'</span>$(cat config_update.json)<span class="string">'&#125;&#125;&#125;'</span> | jq . &gt; config_update_in_envelope.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 将待提交信息编码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_encode --input config_update_in_envelope.json --<span class="built_in">type</span> common.Envelope &gt; <span class="string">"<span class="variable">$&#123;OUTPUT&#125;</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 4.提交更新请求</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 设置变量信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CH_NAME=testchainid</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用tls</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer channel update -f config_update_in_envelope.pb -c <span class="variable">$CH_NAME</span> -o orderer.example.com:7050 --tls <span class="literal">true</span> --cafile <span class="variable">$ORDERER_CA</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#------------------------------------------------------------</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># Config update for /Channel on testchainid</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#------------------------------------------------------------</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 1.获取config信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># setOrdererGlobals</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_LOCALMSPID=<span class="string">"OrdererMSP"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/users/Admin@example.com/msp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用的变量信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CHANNEL=testchainid</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> OUTPUT=config.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 获得config信息 使用 tls</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer channel fetch config config_block.pb -o orderer.example.com:7050 -c <span class="variable">$CHANNEL</span> --tls --cafile <span class="variable">$ORDERER_CA</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用configtxlator 解析信息 写入到json文件中</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_decode --input config_block.pb --<span class="built_in">type</span> common.Block | jq .data.data[0].payload.data.config &gt; <span class="string">"<span class="variable">$&#123;OUTPUT&#125;</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 2.修改config信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> jq -s <span class="string">'.[0] * &#123;"channel_group":&#123;"values": &#123;"Capabilities": .[1]&#125;&#125;&#125;'</span> config.json ./capabilities.json &gt; modified_config.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 3.创建config更新文件</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 设置变量信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CHANNEL=<span class="string">"testchainid"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ORIGINAL=config.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> MODIFIED=modified_config.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> OUTPUT=config_update_in_envelope.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用configtxlator将config.json编码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_encode --input <span class="string">"<span class="variable">$&#123;ORIGINAL&#125;</span>"</span> --<span class="built_in">type</span> common.Config &gt; original_config.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用configtxlator将modified_config.json编码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_encode --input <span class="string">"<span class="variable">$&#123;MODIFIED&#125;</span>"</span> --<span class="built_in">type</span> common.Config &gt; modified_config.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 计算更新差异</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator compute_update --channel_id <span class="string">"<span class="variable">$&#123;CHANNEL&#125;</span>"</span> --original original_config.pb --updated modified_config.pb &gt; config_update.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 解码config_update.pb 并且写入到 config_update.json</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_decode --input config_update.pb  --<span class="built_in">type</span> common.ConfigUpdate &gt; config_update.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 生成待提交信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"'</span><span class="variable">$CHANNEL</span><span class="string">'", "type":2&#125;&#125;,"data":&#123;"config_update":'</span>$(cat config_update.json)<span class="string">'&#125;&#125;&#125;'</span> | jq . &gt; config_update_in_envelope.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 将待提交信息编码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_encode --input config_update_in_envelope.json --<span class="built_in">type</span> common.Envelope &gt; <span class="string">"<span class="variable">$&#123;OUTPUT&#125;</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 4.提交更新请求</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 设置变量信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CH_NAME=testchainid</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用tls</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer channel update -f config_update_in_envelope.pb -c <span class="variable">$CH_NAME</span> -o orderer.example.com:7050 --tls <span class="literal">true</span> --cafile <span class="variable">$ORDERER_CA</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#------------------------------------------------------------</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># Config update for /Channel/Orderer</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#------------------------------------------------------------</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 1.获取config信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># setOrdererGlobals</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_LOCALMSPID=<span class="string">"OrdererMSP"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/users/Admin@example.com/msp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用的变量信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CHANNEL=mychannel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> OUTPUT=config.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 获得config信息 使用 tls</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer channel fetch config config_block.pb -o orderer.example.com:7050 -c <span class="variable">$CHANNEL</span> --tls --cafile <span class="variable">$ORDERER_CA</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用configtxlator 解析信息 写入到json文件中</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_decode --input config_block.pb --<span class="built_in">type</span> common.Block | jq .data.data[0].payload.data.config &gt; <span class="string">"<span class="variable">$&#123;OUTPUT&#125;</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 2.修改config信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> jq -s <span class="string">'.[0] * &#123;"channel_group":&#123;"groups":&#123;"Orderer": &#123;"values": &#123;"Capabilities": .[1]&#125;&#125;&#125;&#125;&#125;'</span> config.json ./capabilities.json &gt; modified_config.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 3.创建config更新文件</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 设置变量信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CHANNEL=<span class="string">"mychannel"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ORIGINAL=config.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> MODIFIED=modified_config.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> OUTPUT=config_update_in_envelope.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用configtxlator将config.json编码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_encode --input <span class="string">"<span class="variable">$&#123;ORIGINAL&#125;</span>"</span> --<span class="built_in">type</span> common.Config &gt; original_config.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用configtxlator将modified_config.json编码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_encode --input <span class="string">"<span class="variable">$&#123;MODIFIED&#125;</span>"</span> --<span class="built_in">type</span> common.Config &gt; modified_config.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 计算更新差异</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator compute_update --channel_id <span class="string">"<span class="variable">$&#123;CHANNEL&#125;</span>"</span> --original original_config.pb --updated modified_config.pb &gt; config_update.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 解码config_update.pb 并且写入到 config_update.json</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_decode --input config_update.pb  --<span class="built_in">type</span> common.ConfigUpdate &gt; config_update.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 生成待提交信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"'</span><span class="variable">$CHANNEL</span><span class="string">'", "type":2&#125;&#125;,"data":&#123;"config_update":'</span>$(cat config_update.json)<span class="string">'&#125;&#125;&#125;'</span> | jq . &gt; config_update_in_envelope.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 将待提交信息编码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_encode --input config_update_in_envelope.json --<span class="built_in">type</span> common.Envelope &gt; <span class="string">"<span class="variable">$&#123;OUTPUT&#125;</span>"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 4.提交更新请求</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 设置变量信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CH_NAME=mychannel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用tls</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer channel update -f config_update_in_envelope.pb -c <span class="variable">$CH_NAME</span> -o orderer.example.com:7050 --tls <span class="literal">true</span> --cafile <span class="variable">$ORDERER_CA</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#------------------------------------------------------------</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># Config update for /Channel/Application</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#------------------------------------------------------------</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 1.获取config信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># setOrdererGlobals</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_LOCALMSPID=<span class="string">"OrdererMSP"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/users/Admin@example.com/msp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用的变量信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CHANNEL=mychannel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> OUTPUT=config.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 获得config信息 使用 tls</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer channel fetch config config_block.pb -o orderer.example.com:7050 -c <span class="variable">$CHANNEL</span> --tls --cafile <span class="variable">$ORDERER_CA</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用configtxlator 解析信息 写入到json文件中</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_decode --input config_block.pb --<span class="built_in">type</span> common.Block | jq .data.data[0].payload.data.config &gt; <span class="string">"<span class="variable">$&#123;OUTPUT&#125;</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 2.修改config信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> jq -s <span class="string">'.[0] * &#123;"channel_group":&#123;"groups":&#123;"Application": &#123;"values": &#123;"Capabilities": .[1]&#125;&#125;&#125;&#125;&#125;'</span> config.json ./capabilities.json &gt; modified_config.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 3.创建config更新文件</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 设置变量信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CHANNEL=<span class="string">"mychannel"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ORIGINAL=config.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> MODIFIED=modified_config.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> OUTPUT=config_update_in_envelope.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用configtxlator将config.json编码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_encode --input <span class="string">"<span class="variable">$&#123;ORIGINAL&#125;</span>"</span> --<span class="built_in">type</span> common.Config &gt; original_config.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用configtxlator将modified_config.json编码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_encode --input <span class="string">"<span class="variable">$&#123;MODIFIED&#125;</span>"</span> --<span class="built_in">type</span> common.Config &gt; modified_config.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 计算更新差异</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator compute_update --channel_id <span class="string">"<span class="variable">$&#123;CHANNEL&#125;</span>"</span> --original original_config.pb --updated modified_config.pb &gt; config_update.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 解码config_update.pb 并且写入到 config_update.json</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_decode --input config_update.pb  --<span class="built_in">type</span> common.ConfigUpdate &gt; config_update.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 生成待提交信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"'</span><span class="variable">$CHANNEL</span><span class="string">'", "type":2&#125;&#125;,"data":&#123;"config_update":'</span>$(cat config_update.json)<span class="string">'&#125;&#125;&#125;'</span> | jq . &gt; config_update_in_envelope.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 将待提交信息编码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_encode --input config_update_in_envelope.json --<span class="built_in">type</span> common.Envelope &gt; <span class="string">"<span class="variable">$&#123;OUTPUT&#125;</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 4.进行不同组织签名 使用不同组织admin</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 待签名背书信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TX=config_update_in_envelope.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># org1组织peer节点签名 Sign with PeerOrg1.Admin</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_LOCALMSPID=<span class="string">"Org1MSP"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer channel signconfigtx -f <span class="string">"<span class="variable">$&#123;TX&#125;</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># ----------------------------------------------</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># Prepare to sign the update as the PeerOrg2.Admin</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_LOCALMSPID=<span class="string">"Org2MSP"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_ADDRESS=peer0.org2.example.com:7051</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 5.提交更新请求</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 设置变量信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CH_NAME=mychannel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用tls</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer channel update -f config_update_in_envelope.pb -c <span class="variable">$CH_NAME</span> -o orderer.example.com:7050 --tls <span class="literal">true</span> --cafile <span class="variable">$ORDERER_CA</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#------------------------------------------------------------</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># Config update for /Channel</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#------------------------------------------------------------</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 1.获取config信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># setOrdererGlobals</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_LOCALMSPID=<span class="string">"OrdererMSP"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/users/Admin@example.com/msp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用的变量信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CHANNEL=mychannel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> OUTPUT=config.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 获得config信息 使用 tls</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer channel fetch config config_block.pb -o orderer.example.com:7050 -c <span class="variable">$CHANNEL</span> --tls --cafile <span class="variable">$ORDERER_CA</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用configtxlator 解析信息 写入到json文件中</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_decode --input config_block.pb --<span class="built_in">type</span> common.Block | jq .data.data[0].payload.data.config &gt; <span class="string">"<span class="variable">$&#123;OUTPUT&#125;</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 2.修改config信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> jq -s <span class="string">'.[0] * &#123;"channel_group":&#123;"values": &#123;"Capabilities": .[1]&#125;&#125;&#125;'</span> config.json ./capabilities.json &gt; modified_config.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 3.创建config更新文件</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 设置变量信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CHANNEL=<span class="string">"mychannel"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ORIGINAL=config.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> MODIFIED=modified_config.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> OUTPUT=config_update_in_envelope.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用configtxlator将config.json编码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_encode --input <span class="string">"<span class="variable">$&#123;ORIGINAL&#125;</span>"</span> --<span class="built_in">type</span> common.Config &gt; original_config.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用configtxlator将modified_config.json编码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_encode --input <span class="string">"<span class="variable">$&#123;MODIFIED&#125;</span>"</span> --<span class="built_in">type</span> common.Config &gt; modified_config.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 计算更新差异</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator compute_update --channel_id <span class="string">"<span class="variable">$&#123;CHANNEL&#125;</span>"</span> --original original_config.pb --updated modified_config.pb &gt; config_update.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 解码config_update.pb 并且写入到 config_update.json</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_decode --input config_update.pb  --<span class="built_in">type</span> common.ConfigUpdate &gt; config_update.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 生成待提交信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"'</span><span class="variable">$CHANNEL</span><span class="string">'", "type":2&#125;&#125;,"data":&#123;"config_update":'</span>$(cat config_update.json)<span class="string">'&#125;&#125;&#125;'</span> | jq . &gt; config_update_in_envelope.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 将待提交信息编码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configtxlator proto_encode --input config_update_in_envelope.json --<span class="built_in">type</span> common.Envelope &gt; <span class="string">"<span class="variable">$&#123;OUTPUT&#125;</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 4.进行不同组织签名 使用不同组织admin</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 待签名背书信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TX=config_update_in_envelope.pb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># org1组织peer节点签名 Sign with PeerOrg1.Admin</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_LOCALMSPID=<span class="string">"Org1MSP"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer channel signconfigtx -f <span class="string">"<span class="variable">$&#123;TX&#125;</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># ----------------------------------------------</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># org2组织peer节点签名 Sign with PeerOrg2.Admin</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_LOCALMSPID=<span class="string">"Org2MSP"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_ADDRESS=peer0.org2.example.com:7051</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer channel signconfigtx -f <span class="string">"<span class="variable">$&#123;TX&#125;</span>"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 将环境变量信息切换到orderer</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_LOCALMSPID=<span class="string">"OrdererMSP"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/users/Admin@example.com/msp</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 5.提交更新请求</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 设置变量信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CH_NAME=mychannel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 使用tls</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer channel update -f config_update_in_envelope.pb -c <span class="variable">$CH_NAME</span> -o orderer.example.com:7050 --tls <span class="literal">true</span> --cafile <span class="variable">$ORDERER_CA</span></span></span><br></pre></td></tr></table></figure><p>以上升级完毕，进行测试</p><hr><ol start="4"><li>测试区块链网络</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># query test</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_LOCALMSPID=<span class="string">"Org1MSP"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CHANNEL_NAME=mychannel</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer chaincode query -C <span class="variable">$CHANNEL_NAME</span> -n mycc -c <span class="string">'&#123;"Args":["query","a"]&#125;'</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># invoke test</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_LOCALMSPID=<span class="string">"Org1MSP"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CHANNEL_NAME=mychannel</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer chaincode invoke -o orderer.example.com:7050  --tls <span class="literal">true</span> --cafile <span class="variable">$ORDERER_CA</span> -C <span class="variable">$CHANNEL_NAME</span> -n mycc -c <span class="string">'&#123;"Args":["invoke","a","b","10"]&#125;'</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># query test again</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_LOCALMSPID=<span class="string">"Org1MSP"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CHANNEL_NAME=mychannel</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer chaincode query -C <span class="variable">$CHANNEL_NAME</span> -n mycc -c <span class="string">'&#123;"Args":["query","a"]&#125;'</span></span></span><br></pre></td></tr></table></figure><p>执行完上述 a账户余额变为80 说明区块链网络正确升级到 v1.1.0版本</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用的基础环境是hyperledger fabric v1.0.0中的e2e_demo示例，启动一个e2e网络。&lt;/p&gt;
&lt;hr&gt;
&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;准备工作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;启动环境方法可以参考 &lt;a href=&quot;http://zhaozi
      
    
    </summary>
    
      <category term="区块链" scheme="http://zhaoziqian.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hyperledger fabric" scheme="http://zhaoziqian.top/tags/Hyperledger-fabric/"/>
    
      <category term="区块链" scheme="http://zhaoziqian.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本中的set命令</title>
    <link href="http://zhaoziqian.top/2018/08/03/shell%E8%84%9A%E6%9C%AC%E4%B8%AD%E7%9A%84set%E5%91%BD%E4%BB%A4/"/>
    <id>http://zhaoziqian.top/2018/08/03/shell脚本中的set命令/</id>
    <published>2018-08-03T07:10:21.000Z</published>
    <updated>2018-08-03T07:12:39.053Z</updated>
    
    <content type="html"><![CDATA[<h5 id="set去追踪一段代码的显示情况，执行后在整个脚本有效"><a href="#set去追踪一段代码的显示情况，执行后在整个脚本有效" class="headerlink" title="set去追踪一段代码的显示情况，执行后在整个脚本有效"></a>set去追踪一段代码的显示情况，执行后在整个脚本有效</h5><p>set -x 开启 </p><p>set +x 关闭</p><p>set -o 查看</p><h5 id="set指令能设置所使用shell的执行方式，可依照不同的需求来做设置"><a href="#set指令能设置所使用shell的执行方式，可依照不同的需求来做设置" class="headerlink" title="set指令能设置所使用shell的执行方式，可依照不同的需求来做设置"></a>set指令能设置所使用shell的执行方式，可依照不同的需求来做设置</h5><p><code>-a 　标示已修改的变量，以供输出至环境变量。 　-b 　使被中止的后台程序立刻回报执行状态。 　-C 　转向所产生的文件无法覆盖已存在的文件。 　-d 　Shell预设会用杂凑表记忆使用过的指令，以加速指令的执行。使用-d参数可取消。 　-e 　若指令传回值不等于0，则立即退出shell。　　 　-f　 　取消使用通配符。 　-h 　自动记录函数的所在位置。 　-H Shell 　可利用&quot;!&quot;加&lt;指令编号&gt;的方式来执行history中记录的指令。 　-k 　指令所给的参数都会被视为此指令的环境变量。 　-l 　记录for循环的变量名称。 　-m 　使用监视模式。 　-n 　只读取指令，而不实际执行。 　-p 　启动优先顺序模式。 　-P 　启动-P参数后，执行指令时，会以实际的文件或目录来取代符号连接。 　-t 　执行完随后的指令，即退出shell。 　-u 　当执行时使用到未定义过的变量，则显示错误信息。 　-v 　显示shell所读取的输入值。 　-x 　执行指令后，会先显示该指令及所下的参数。 　+&lt;参数&gt; 　取消某个set曾启动的参数。</code>　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;set去追踪一段代码的显示情况，执行后在整个脚本有效&quot;&gt;&lt;a href=&quot;#set去追踪一段代码的显示情况，执行后在整个脚本有效&quot; class=&quot;headerlink&quot; title=&quot;set去追踪一段代码的显示情况，执行后在整个脚本有效&quot;&gt;&lt;/a&gt;set去追踪一段
      
    
    </summary>
    
      <category term="shell" scheme="http://zhaoziqian.top/categories/shell/"/>
    
    
      <category term="linux" scheme="http://zhaoziqian.top/tags/linux/"/>
    
      <category term="shell" scheme="http://zhaoziqian.top/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>activeMQ集群搭建 Master - Slave模式</title>
    <link href="http://zhaoziqian.top/2018/08/01/activeMQ%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA-Master-Slave%E6%A8%A1%E5%BC%8F/"/>
    <id>http://zhaoziqian.top/2018/08/01/activeMQ集群搭建-Master-Slave模式/</id>
    <published>2018-08-01T08:30:04.000Z</published>
    <updated>2018-08-01T08:38:26.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="activeMQ集群搭建"><a href="#activeMQ集群搭建" class="headerlink" title="activeMQ集群搭建"></a>activeMQ集群搭建</h1><p>使用docker容器完成集群搭建，ZooKeeper + LevelDB 的 Master-Slave 实现方式</p><p><a href="http://activemq.apache.org/masterslave.html" target="_blank" rel="noopener">http://activemq.apache.org/masterslave.html</a></p><p>官网集群搭建文档<a href="http://activemq.apache.org/clustering.html" target="_blank" rel="noopener">http://activemq.apache.org/clustering.html</a></p><p><strong>高可用原理</strong></p><p>使用ZooKeeper（集群）注册所有的ActiveMQ Broker。只有其中的一个Broker可以提供服务，被视为Master，其他的Broker（节点）处于待机状态，被视为Slave。如果Master因故障而不能提供服务，ZooKeeper会从Slave中选举出一个Broker充当Master<br>Slave连接Master并同步他们的存储状态，Slave不接受客户端连接。所有的存储操作都将被复制到连接至Master的Slaves。如果Master宕了，得到了最新的Slave会成为Master。故障节点在回复后会重新加入到集群中并连接Master进入Slave模式。</p><p>所有需同步的disk的消息操作都将等待存储状态被复制到其他法定节点的操作完成才能完成。所以，如果你配置了replicas=3，那么法定大小是（3/2）+1=2。Master将会存储并更新然后等待（2-1）=1个Slave存储和更新完成，才汇报success。至于为什么是2-1，熟悉Zookeeper的应该知道，有一个node要作为观察者存在。当一个新的Master被选中，你需要至少保障一个法定node在线以能够找到拥有最新状态的node。这个node可以成为新的Master。因此，推荐运行至少3个replica nodes，以防止一个node失败了，服务中断。（原理与Zookeeper集群的高可用实现方式类似）</p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-1/59697060.jpg" alt="image"></p><h4 id="0-部署规划"><a href="#0-部署规划" class="headerlink" title="0 部署规划"></a>0 部署规划</h4><p>docker 搭建zookeeper集群环境，参考文章  <a href="http://zhaoziqian.top/2018/08/01/zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/">zookeeper集群搭建</a></p><p>ZooKeeper集群环境：127.0.0.1:2181、127.0.0.1:2182 、127.0.0.1:2183</p><table><thead><tr><th>主机</th><th>集群端口</th><th>消息端口</th><th>管控台端口</th><th>节点挂载目录</th></tr></thead><tbody><tr><td>127.0.0.1</td><td>62621</td><td>61616</td><td>8161</td><td>~/i/app/activemq/node1</td></tr><tr><td>127.0.0.1</td><td>62622</td><td>61617</td><td>8162</td><td>~/i/app/activemq/node2</td></tr><tr><td>127.0.0.1</td><td>62623</td><td>61618</td><td>8163</td><td>~/i/app/activemq/node3</td></tr></tbody></table><h4 id="1-获取镜像"><a href="#1-获取镜像" class="headerlink" title="1 获取镜像"></a>1 获取镜像</h4><p><a href="hub.docker.com">hub.docker.com</a> 上有很多可以自己选择，我下载的是<a href="https://hub.docker.com/r/rmohr/activemq/" target="_blank" rel="noopener">https://hub.docker.com/r/rmohr/activemq/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker pull rmohr/activemq:5.15.3</span><br></pre></td></tr></table></figure><h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2 修改配置文件"></a>2 修改配置文件</h4><p>先创建一个用来存放activeMQ配置文件，和消息日志的路径</p><p>目录如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># tree ../activemq -L 1</span><br><span class="line">../activemq</span><br><span class="line">├── docker-compose.yaml</span><br><span class="line">├── node1</span><br><span class="line">│   ├── conf</span><br><span class="line">│   └── data</span><br><span class="line">├── node2</span><br><span class="line">│   ├── conf</span><br><span class="line">│   └── data</span><br><span class="line">└── node3</span><br><span class="line">    ├── conf</span><br><span class="line">    └── data</span><br></pre></td></tr></table></figure></p><p>对应修改修改activemq.xml</p><p><strong>activemq/node1/conf/activemq.xml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans</span><br><span class="line">  xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;locations&quot;&gt;</span><br><span class="line">            &lt;value&gt;file:$&#123;activemq.conf&#125;/credentials.properties&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;logQuery&quot; class=&quot;io.fabric8.insight.log.log4j.Log4jLogQuery&quot;</span><br><span class="line">          lazy-init=&quot;false&quot; scope=&quot;singleton&quot;</span><br><span class="line">          init-method=&quot;start&quot; destroy-method=&quot;stop&quot;&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;broker xmlns=&quot;http://activemq.apache.org/schema/core&quot; brokerName=&quot;localhost&quot; dataDirectory=&quot;$&#123;activemq.data&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;destinationPolicy&gt;</span><br><span class="line">            &lt;policyMap&gt;</span><br><span class="line">              &lt;policyEntries&gt;</span><br><span class="line">                &lt;policyEntry topic=&quot;&gt;&quot; &gt;</span><br><span class="line">                  &lt;pendingMessageLimitStrategy&gt;</span><br><span class="line">                    &lt;constantPendingMessageLimitStrategy limit=&quot;1000&quot;/&gt;</span><br><span class="line">                  &lt;/pendingMessageLimitStrategy&gt;</span><br><span class="line">                &lt;/policyEntry&gt;</span><br><span class="line">              &lt;/policyEntries&gt;</span><br><span class="line">            &lt;/policyMap&gt;</span><br><span class="line">        &lt;/destinationPolicy&gt;</span><br><span class="line"></span><br><span class="line">        &lt;managementContext&gt;</span><br><span class="line">            &lt;managementContext createConnector=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/managementContext&gt;</span><br><span class="line"></span><br><span class="line">        &lt;persistenceAdapter&gt;</span><br><span class="line">            &lt;replicatedLevelDB</span><br><span class="line">             directory=&quot;$&#123;activemq.data&#125;/leveldb&quot;</span><br><span class="line">             replicas=&quot;3&quot;</span><br><span class="line">             bind=&quot;tcp://0.0.0.0:62621&quot;</span><br><span class="line">             zkAddress=&quot;192.168.43.227:2181,192.168.43.227:2182,192.168.43.227:2183&quot;</span><br><span class="line">             hostname=&quot;192.168.43.227&quot;</span><br><span class="line">             zkPath=&quot;/activemq/leveldb-stores&quot;</span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;/persistenceAdapter&gt;</span><br><span class="line"></span><br><span class="line">        &lt;systemUsage&gt;</span><br><span class="line">            &lt;systemUsage&gt;</span><br><span class="line">                &lt;memoryUsage&gt;</span><br><span class="line">                    &lt;memoryUsage percentOfJvmHeap=&quot;70&quot; /&gt;</span><br><span class="line">                &lt;/memoryUsage&gt;</span><br><span class="line">                &lt;storeUsage&gt;</span><br><span class="line">                    &lt;storeUsage limit=&quot;100 gb&quot;/&gt;</span><br><span class="line">                &lt;/storeUsage&gt;</span><br><span class="line">                &lt;tempUsage&gt;</span><br><span class="line">                    &lt;tempUsage limit=&quot;50 gb&quot;/&gt;</span><br><span class="line">                &lt;/tempUsage&gt;</span><br><span class="line">            &lt;/systemUsage&gt;</span><br><span class="line">        &lt;/systemUsage&gt;</span><br><span class="line"></span><br><span class="line">        &lt;transportConnectors&gt;</span><br><span class="line">            &lt;transportConnector name=&quot;openwire&quot; uri=&quot;tcp://0.0.0.0:61616?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600&quot;/&gt;</span><br><span class="line">        &lt;/transportConnectors&gt;</span><br><span class="line"></span><br><span class="line">        &lt;shutdownHooks&gt;</span><br><span class="line">            &lt;bean xmlns=&quot;http://www.springframework.org/schema/beans&quot; class=&quot;org.apache.activemq.hooks.SpringContextHook&quot; /&gt;</span><br><span class="line">        &lt;/shutdownHooks&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/broker&gt;</span><br><span class="line"></span><br><span class="line">    &lt;import resource=&quot;jetty.xml&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><strong>activemq/node2/conf/activemq.xml,对应修改如下部分</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;persistenceAdapter&gt;</span><br><span class="line">    &lt;replicatedLevelDB</span><br><span class="line">     directory=&quot;$&#123;activemq.data&#125;/leveldb&quot;</span><br><span class="line">     replicas=&quot;3&quot;</span><br><span class="line">     bind=&quot;tcp://0.0.0.0:62622&quot;</span><br><span class="line">     zkAddress=&quot;192.168.43.227:2181,192.168.43.227:2182,192.168.43.227:2183&quot;</span><br><span class="line">     hostname=&quot;192.168.43.227&quot;</span><br><span class="line">     zkPath=&quot;/activemq/leveldb-stores&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/persistenceAdapter&gt;</span><br><span class="line"></span><br><span class="line">&lt;transportConnectors&gt;</span><br><span class="line">    &lt;transportConnector name=&quot;openwire&quot; uri=&quot;tcp://0.0.0.0:61617?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600&quot;/&gt;</span><br><span class="line">&lt;/transportConnectors&gt;</span><br></pre></td></tr></table></figure><p><strong>activemq/node1/conf/activemq.xml,对应修改如下部分</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;persistenceAdapter&gt;</span><br><span class="line">    &lt;replicatedLevelDB</span><br><span class="line">     directory=&quot;$&#123;activemq.data&#125;/leveldb&quot;</span><br><span class="line">     replicas=&quot;3&quot;</span><br><span class="line">     bind=&quot;tcp://0.0.0.0:62623&quot;</span><br><span class="line">     zkAddress=&quot;192.168.43.227:2181,192.168.43.227:2182,192.168.43.227:2183&quot;</span><br><span class="line">     hostname=&quot;192.168.43.227&quot;</span><br><span class="line">     zkPath=&quot;/activemq/leveldb-stores&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/persistenceAdapter&gt;</span><br><span class="line"></span><br><span class="line">&lt;transportConnectors&gt;</span><br><span class="line">    &lt;transportConnector name=&quot;openwire&quot; uri=&quot;tcp://0.0.0.0:61618?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600&quot;/&gt;</span><br><span class="line">&lt;/transportConnectors&gt;</span><br></pre></td></tr></table></figure><p><strong>docker-compose.yaml 文件内容如下</strong></p><p>我自己又包装了一下activemq的镜像，用直接下载的也是可以的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3&apos;</span><br><span class="line">  </span><br><span class="line">services :</span><br><span class="line">    mq1:</span><br><span class="line">      image: zzq/activemq:5.15.3</span><br><span class="line">      container_name: mq1</span><br><span class="line">      hostname: node1</span><br><span class="line">      volumes:</span><br><span class="line">        - /Users/zhaoziqian/i/app/activemq/node1/conf:/opt/activemq/conf</span><br><span class="line">        - /Users/zhaoziqian/i/app/activemq/node1/data:/opt/activemq/data</span><br><span class="line">      ports: </span><br><span class="line">        - 62621:62621</span><br><span class="line">        - 61616:61616 </span><br><span class="line">        - 8161:8161</span><br><span class="line">      </span><br><span class="line">    mq2:</span><br><span class="line">      image: zzq/activemq:5.15.3</span><br><span class="line">      container_name: mq2</span><br><span class="line">      hostname: node2</span><br><span class="line">      volumes:</span><br><span class="line">        - /Users/zhaoziqian/i/app/activemq/node2/conf:/opt/activemq/conf</span><br><span class="line">        - /Users/zhaoziqian/i/app/activemq/node2/data:/opt/activemq/data</span><br><span class="line">      ports: </span><br><span class="line">        - 62622:62622</span><br><span class="line">        - 61617:61617 </span><br><span class="line">        - 8162:8161</span><br><span class="line">    </span><br><span class="line">    mq3:</span><br><span class="line">      image: zzq/activemq:5.15.3</span><br><span class="line">      container_name: mq3</span><br><span class="line">      hostname: node3</span><br><span class="line">      volumes:</span><br><span class="line">        - /Users/zhaoziqian/i/app/activemq/node3/conf:/opt/activemq/conf</span><br><span class="line">        - /Users/zhaoziqian/i/app/activemq/node3/data:/opt/activemq/data</span><br><span class="line">      ports: </span><br><span class="line">        - 62623:62623</span><br><span class="line">        - 61618:61618 </span><br><span class="line">        - 8163:8161</span><br></pre></td></tr></table></figure><h4 id="3-启动集群"><a href="#3-启动集群" class="headerlink" title="3 启动集群"></a>3 启动集群</h4><p>【1】先启动zookeeper集群，参考文章  <a href="http://zhaoziqian.top/2018/08/01/zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/">zookeeper集群搭建</a></p><p>【2】启动activemq集群</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># #进入docker-compose.yaml所在目录</span><br><span class="line"># docker-compose up -d </span><br><span class="line"></span><br><span class="line"># docker-compose ps</span><br><span class="line">Name              Command               State                                                                Ports</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">mq1    /bin/sh -c bin/activemq co ...   Up      1883/tcp, 5672/tcp, 61613/tcp, 61614/tcp, 0.0.0.0:61616-&gt;61616/tcp, 0.0.0.0:62621-&gt;62621/tcp, 0.0.0.0:8161-&gt;8161/tcp</span><br><span class="line">mq2    /bin/sh -c bin/activemq co ...   Up      1883/tcp, 5672/tcp, 61613/tcp, 61614/tcp, 61616/tcp, 0.0.0.0:61617-&gt;61617/tcp, 0.0.0.0:62622-&gt;62622/tcp, 0.0.0.0:8162-&gt;8161/tcp</span><br><span class="line">mq3    /bin/sh -c bin/activemq co ...   Up      1883/tcp, 5672/tcp, 61613/tcp, 61614/tcp, 61616/tcp, 0.0.0.0:61618-&gt;61618/tcp, 0.0.0.0:62623-&gt;62623/tcp, 0.0.0.0:8163-&gt;8161/tcp</span><br></pre></td></tr></table></figure><p>【3】可以使用 ZooInspector 来查看activemq的工作状态，【<a href="http://zhaoziqian.top/2018/08/01/Zookeeper%E6%95%B0%E6%8D%AE%E6%9F%A5%E7%9C%8B%E5%B7%A5%E5%85%B7ZooInspector/">ZooInspector 使用方法</a>】</p><p>使用工具连接zookeeper之后可以看到activemq的工作目录如下<br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-1/84073865.jpg" alt="image"></p><p>只有一个处在工作状态master，其他两个节点为slave</p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-1/64187850.jpg" alt="image"></p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-1/29258377.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;activeMQ集群搭建&quot;&gt;&lt;a href=&quot;#activeMQ集群搭建&quot; class=&quot;headerlink&quot; title=&quot;activeMQ集群搭建&quot;&gt;&lt;/a&gt;activeMQ集群搭建&lt;/h1&gt;&lt;p&gt;使用docker容器完成集群搭建，ZooKeeper + L
      
    
    </summary>
    
      <category term="中间件" scheme="http://zhaoziqian.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="中间件" scheme="http://zhaoziqian.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="activemq" scheme="http://zhaoziqian.top/tags/activemq/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper数据查看工具ZooInspector</title>
    <link href="http://zhaoziqian.top/2018/08/01/Zookeeper%E6%95%B0%E6%8D%AE%E6%9F%A5%E7%9C%8B%E5%B7%A5%E5%85%B7ZooInspector/"/>
    <id>http://zhaoziqian.top/2018/08/01/Zookeeper数据查看工具ZooInspector/</id>
    <published>2018-08-01T08:17:18.000Z</published>
    <updated>2018-08-01T08:25:38.861Z</updated>
    
    <content type="html"><![CDATA[<p>我们可以通过ZkCli.sh命令客户端查看,但是直接从控制台操作需要使用各种命令，不是特别方便。</p><p>所以现在推荐这款界面话操作工具ZooInspector，工具为java开发，只要在有GUI和java运行环境的平台就可以使用。</p><p><a href="https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip" target="_blank" rel="noopener">下载地址</a></p><p><a href="https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip" target="_blank" rel="noopener">https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip</a></p><p>使用方法，解压后进入 <code>build</code>目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zookeeper-dev-ZooInspector.jar</span><br></pre></td></tr></table></figure><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-1/77669483.jpg" alt="image"></p><p>点击左上角绿色运行按钮</p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-1/12380539.jpg" alt="image"></p><p>点击OK，即可查看ZK节点信息</p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-1/16707037.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们可以通过ZkCli.sh命令客户端查看,但是直接从控制台操作需要使用各种命令，不是特别方便。&lt;/p&gt;
&lt;p&gt;所以现在推荐这款界面话操作工具ZooInspector，工具为java开发，只要在有GUI和java运行环境的平台就可以使用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;h
      
    
    </summary>
    
      <category term="中间件" scheme="http://zhaoziqian.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="zookeeper" scheme="http://zhaoziqian.top/tags/zookeeper/"/>
    
      <category term="中间件" scheme="http://zhaoziqian.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper集群搭建</title>
    <link href="http://zhaoziqian.top/2018/08/01/zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://zhaoziqian.top/2018/08/01/zookeeper集群搭建/</id>
    <published>2018-08-01T02:03:28.000Z</published>
    <updated>2018-08-01T08:18:45.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zookeeper-集群搭建"><a href="#zookeeper-集群搭建" class="headerlink" title="zookeeper 集群搭建"></a>zookeeper 集群搭建</h1><p><strong>闲话</strong></p><p><em>本来作为开发其实不用操心zookeeper集群，就是做demo启动一个单点的zookeeper就可以了。如果是在mac环境下，直接使用<code>brew</code>命令，就可以快速安装，再安装一个<code>LaunchRocket</code>不要太方便。</em></p><p><em>但是在生产环境中就需要考虑高可用，服务集群化势在必行。</em></p><p>本案例使用docker容器话集群</p><p><span style="font-size:20px; font-weight:bold;">1. 获取zookeeper docker镜像</span></p><p><a href="https://hub.docker.com/_/zookeeper/" target="_blank" rel="noopener">zookeeper 镜像仓库地址</a></p><p>我下载的镜像是3.4.12版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># docker pull zookeeper:3.4.12</span><br><span class="line"></span><br><span class="line"># docker images </span><br><span class="line"></span><br><span class="line">REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zookeeper                      3.4.12              cfed220ec48b        2 weeks ago         148MB</span><br><span class="line">zookeeper                      latest              cfed220ec48b        2 weeks ago         148MB</span><br></pre></td></tr></table></figure><p><span style="font-size:20px; font-weight:bold;">2. 编写docker-compose文件</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3.1&apos;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  zoo1:</span><br><span class="line">    image: zookeeper</span><br><span class="line">    container_name: zoo1</span><br><span class="line">    restart: always</span><br><span class="line">    hostname: zoo1</span><br><span class="line">    ports:</span><br><span class="line">      - 2181:2181</span><br><span class="line">    environment:</span><br><span class="line">      ZOO_MY_ID: 1</span><br><span class="line">      ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888</span><br><span class="line"></span><br><span class="line">  zoo2:</span><br><span class="line">    image: zookeeper</span><br><span class="line">    container_name: zoo2</span><br><span class="line">    restart: always</span><br><span class="line">    hostname: zoo2</span><br><span class="line">    ports:</span><br><span class="line">      - 2182:2181</span><br><span class="line">    environment:</span><br><span class="line">      ZOO_MY_ID: 2</span><br><span class="line">      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zoo3:2888:3888</span><br><span class="line"></span><br><span class="line">  zoo3:</span><br><span class="line">    image: zookeeper</span><br><span class="line">    container_name: zoo3</span><br><span class="line">    restart: always</span><br><span class="line">    hostname: zoo3</span><br><span class="line">    ports:</span><br><span class="line">      - 2183:2181</span><br><span class="line">    environment:</span><br><span class="line">      ZOO_MY_ID: 3</span><br><span class="line">      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=0.0.0.0:2888:3888</span><br></pre></td></tr></table></figure><p><span style="font-size:20px; font-weight:bold;">3. 启动zookeeper 集群</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 进入上述编写docker-compose 文件目录</span><br><span class="line"># docker-compose up -d </span><br><span class="line"></span><br><span class="line"># 查看启动状态</span><br><span class="line"># docker-compose ps </span><br><span class="line"></span><br><span class="line">Name              Command               State                     Ports</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">zoo1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2181-&gt;2181/tcp, 2888/tcp, 3888/tcp</span><br><span class="line">zoo2   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2182-&gt;2181/tcp, 2888/tcp, 3888/tcp</span><br><span class="line">zoo3   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2183-&gt;2181/tcp, 2888/tcp, 3888/tcp</span><br></pre></td></tr></table></figure><p><span style="font-size:20px; font-weight:bold;">4. 本地连接zookeeper 集群</span></p><p>首先本地要有安装zookeeper，具体怎么安装这里就不多详述，mac上就是用 <code>brew install zookeeper</code> 。</p><p>本地不用启动zookeeper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 进入本地zookeeper 目录下的bin目录，执行</span><br><span class="line"># zkCli -server localhost:2181,localhost:2182,localhost:2183</span><br><span class="line"></span><br><span class="line">Connecting to localhost:2181,localhost:2182,localhost:2183</span><br><span class="line">Welcome to ZooKeeper!</span><br><span class="line">JLine support is enabled</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:None path:null</span><br><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 0]</span><br></pre></td></tr></table></figure><p><span style="font-size:20px; font-weight:bold;">5. zookeeper 命令的简单使用</span></p><p> 【1】使用ls命令查看当前Zookeeper中所包含的内容：ls /<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在上述连接基础上</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 0] ls /</span><br><span class="line">[zookeeper]</span><br></pre></td></tr></table></figure></p><p>【2】创建一个新的Znode节点”zk”，以及和它相关字符，执行命令：create /zk myData</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 1] create /zk myData</span><br><span class="line">Created /zk</span><br></pre></td></tr></table></figure><p>【3】 再次使用ls命令来查看现在Zookeeper的中所包含的内容：ls /</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 2] ls /</span><br><span class="line">[zk, zookeeper]</span><br></pre></td></tr></table></figure><p>【4】 使用get命令来确认第二步中所创建的Znode是否包含我们创建的字符串，执行命令：get /zk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 4] get /zk</span><br><span class="line">myData</span><br><span class="line">cZxid = 0x100000004</span><br><span class="line">ctime = Fri Jul 27 11:29:54 CST 2018</span><br><span class="line">mZxid = 0x100000004</span><br><span class="line">mtime = Fri Jul 27 11:29:54 CST 2018</span><br><span class="line">pZxid = 0x100000004</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 6</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p>【5】 接下来通过set命令来对zk所关联的字符串进行设置，执行命令：set /zk zhaoziqian987</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 5] set /zk zhaoziqian987</span><br><span class="line">cZxid = 0x100000004</span><br><span class="line">ctime = Fri Jul 27 11:29:54 CST 2018</span><br><span class="line">mZxid = 0x100000005</span><br><span class="line">mtime = Fri Jul 27 11:32:19 CST 2018</span><br><span class="line">pZxid = 0x100000004</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 13</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p>【6】 再次使用get命令来查看，上次修改的内容，执行命令：get /zk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 6] get /zk</span><br><span class="line">zhaoziqian987</span><br><span class="line">cZxid = 0x100000004</span><br><span class="line">ctime = Fri Jul 27 11:29:54 CST 2018</span><br><span class="line">mZxid = 0x100000005</span><br><span class="line">mtime = Fri Jul 27 11:32:19 CST 2018</span><br><span class="line">pZxid = 0x100000004</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 13</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p>【7】 下面我们将刚才创建的Znode删除，执行命令：delete /zk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 7] delete /zk</span><br></pre></td></tr></table></figure><p>【8】 最后再次使用ls命令查看Zookeeper中的内容，执行命令：ls /</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 8] ls /</span><br><span class="line">[zookeeper]</span><br></pre></td></tr></table></figure><p>此时 zk节点已经被删除</p><p><span style="font-size:20px; font-weight:bold;">6. ZooKeeper中的组成员关系 </span></p><p>理解ZooKeeper的一种方法就是将其看作一个具有高可用性的文件系统。但这个文件系统中没有文件和目录，而是统一使用“节点”(node)的概念，称为znode。znode既可以作为保存数据的容器（如同文件），也可以作为保存其他znode的容器（如同目录）。所有的znode构成一个层次化的命名空间。一种自然的建立组成员列表的方式就是利用这种层次结构，创建一个以组名为节点名的znode作为父节点，然后以组成员名（服务器名）为节点名来创建作为子节点的znode。如下图给出了一组具有层次结构的znode。</p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-7-27/55910934.jpg" script="width:250px;"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;zookeeper-集群搭建&quot;&gt;&lt;a href=&quot;#zookeeper-集群搭建&quot; class=&quot;headerlink&quot; title=&quot;zookeeper 集群搭建&quot;&gt;&lt;/a&gt;zookeeper 集群搭建&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;闲话&lt;/strong&gt;&lt;/p
      
    
    </summary>
    
      <category term="中间件" scheme="http://zhaoziqian.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="zookeeper" scheme="http://zhaoziqian.top/tags/zookeeper/"/>
    
      <category term="中间件" scheme="http://zhaoziqian.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>代码分层</title>
    <link href="http://zhaoziqian.top/2018/07/27/%E4%BB%A3%E7%A0%81%E5%88%86%E5%B1%82/"/>
    <id>http://zhaoziqian.top/2018/07/27/代码分层/</id>
    <published>2018-07-27T01:52:41.000Z</published>
    <updated>2018-08-03T07:17:55.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发人员代码如何科学分层"><a href="#开发人员代码如何科学分层" class="headerlink" title="开发人员代码如何科学分层"></a>开发人员代码如何科学分层</h1><h4 id="在阿里的编码规范中约束的分层如下"><a href="#在阿里的编码规范中约束的分层如下" class="headerlink" title="在阿里的编码规范中约束的分层如下"></a>在阿里的编码规范中约束的分层如下</h4><!--![image](http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-7-27/61939023.jpg)--><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-7-27/61939023.jpg" alt="分层示意图" style="width:365px !important;"><br><span style="color:#117aa8;font-weight:bold">开放接口层</span>：可直接封装 Service 方法暴露成 RPC 接口;通过 Web 封装成 http 接口;进行 网关安全控制、流量控制等。</p><p><span style="color:#117aa8;font-weight:bold">终端显示层</span>：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染， JSP 渲染，移动端展示等。</p><p><span style="color:#117aa8;font-weight:bold">Web 层</span>：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</p><p><span style="color:#117aa8;font-weight:bold">Service 层</span>：相对具体的业务逻辑服务层。</p><p><span style="color:#117aa8;font-weight:bold">Manager 层</span>：通用业务处理层，它有如下特征:1. 对第三方平台封装的层，预处理返回结果及转化异常信息;2. 对Service层通用能力的下沉，如缓存方案、中间件通用处理;3. 与DAO层交互，对多个DAO的组合复用。</p><p><span style="color:#117aa8;font-weight:bold">DAO 层</span>：数据访问层，与底层 MySQL、Oracle、Hbase 进行数据交互。</p><h4 id="分层领域模型的转换"><a href="#分层领域模型的转换" class="headerlink" title="分层领域模型的转换"></a>分层领域模型的转换</h4><p>在阿里巴巴编码规约中列举了下面几个领域模型规约: </p><ul><li><p>DO（Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。 </p></li><li><p>DTO（Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。 </p></li><li><p>BO（Business Object）：业务对象。由Service层输出的封装业务逻辑的对象。 </p></li><li><p>AO（Application Object）：应用对象。在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。 </p></li><li><p>VO（View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。 </p></li><li><p>Query：数据查询对象，各层接收上层的查询请求。注意超过2个参数的查询封装，禁止使用Map类来传输。</p></li></ul><table><thead><tr><th>层次</th><th>领域模型</th></tr></thead><tbody><tr><td>Controller/TService</td><td>VO/DTO</td></tr><tr><td>Service/Manager</td><td>AO/BO</td></tr><tr><td>DAO</td><td>DO</td></tr></tbody></table><p>每一个层基本都自己对应的领域模型，这样就导致了有些人过于追求每一层都是用自己的领域模型，这样就导致了一个对象可能会出现3次甚至4次转换在一次请求中，当返回的时候同样也会出现3-4次转换，这样有可能一次完整的请求-返回会出现很多次对象转换。如果在开发中真的按照这么来，恐怕就别写其他的了，一天就光写这个重复无用的逻辑算了吧。</p><p><span style="color:#117aa8;font-weight:bold">所以我们得采取一个折中的方案</span>: </p><ol><li><p>允许Service/Manager可以操作数据领域模型，对于这个层级来说，本来自己做的工作也是做的是业务逻辑处理和数据组装。 </p></li><li><p>Controller/TService层的领域模型不允许传入DAO层，这样就不符合职责划分了。 </p></li><li><p>同理，不允许DAO层的数据传入到Controller/TService。</p></li></ol><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-7-27/30179223.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开发人员代码如何科学分层&quot;&gt;&lt;a href=&quot;#开发人员代码如何科学分层&quot; class=&quot;headerlink&quot; title=&quot;开发人员代码如何科学分层&quot;&gt;&lt;/a&gt;开发人员代码如何科学分层&lt;/h1&gt;&lt;h4 id=&quot;在阿里的编码规范中约束的分层如下&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Java" scheme="http://zhaoziqian.top/categories/Java/"/>
    
    
      <category term="Java" scheme="http://zhaoziqian.top/tags/Java/"/>
    
      <category term="代码规范" scheme="http://zhaoziqian.top/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>git 常用命令</title>
    <link href="http://zhaoziqian.top/2018/07/25/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://zhaoziqian.top/2018/07/25/git-常用命令/</id>
    <published>2018-07-25T07:33:41.000Z</published>
    <updated>2018-08-02T01:09:51.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-常用操作"><a href="#git-常用操作" class="headerlink" title="git 常用操作"></a>git 常用操作</h1><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><hr><h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure><hr><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure><hr><h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><hr><p>四、代码提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><hr><h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><hr><h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的代码差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br><span class="line"></span><br><span class="line"># 从本地master拉取代码更新当前分支：branch 一般为master</span><br><span class="line">$ git rebase [branch]</span><br></pre></td></tr></table></figure><hr><h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><hr><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><hr><h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-8-2/49404596.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-常用操作&quot;&gt;&lt;a href=&quot;#git-常用操作&quot; class=&quot;headerlink&quot; title=&quot;git 常用操作&quot;&gt;&lt;/a&gt;git 常用操作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Workspace：工作区&lt;/li&gt;
&lt;li&gt;Index / Stage：暂存区
      
    
    </summary>
    
      <category term="git" scheme="http://zhaoziqian.top/categories/git/"/>
    
    
      <category term="git" scheme="http://zhaoziqian.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>(转)Java8 十大新特性详解</title>
    <link href="http://zhaoziqian.top/2018/07/23/%E8%BD%AC-Java8-%E5%8D%81%E5%A4%A7%E6%96%B0%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3/"/>
    <id>http://zhaoziqian.top/2018/07/23/转-Java8-十大新特性详解/</id>
    <published>2018-07-23T08:28:48.000Z</published>
    <updated>2018-08-03T07:15:00.833Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong>： Java 8 已经发布很久了，很多报道表明Java 8 是一次重大的版本升级。在Java Code Geeks上已经有很多介绍Java 8新特性的文章，例如Playing with Java 8 – Lambdas and Concurrency、Java 8 Date Time API Tutorial : LocalDateTime和Abstract Class Versus Interface in the JDK 8 Era。本文还参考了一些其他资料，例如：15 Must Read Java 8 Tutorials和The Dark Side of Java 8。本文综合了上述资料，整理成一份关于Java 8新特性的参考教材，希望你有所收获。</p><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>毫无疑问，Java 8是Java自Java 5（发布于2004年）之后的最重要的版本。这个版本包含语言、编译器、库、工具和JVM等方面的十多个新特性。在本文中我们将学习这些新特性，并用实际的例子说明在什么场景下适合使用。</p><p>这个教程包含Java开发者经常面对的几类问题：</p><ul><li>语言</li><li>编译器</li><li>库</li><li>工具</li><li>运行时（JVM）</li></ul><h1 id="2-Java语言的新特性"><a href="#2-Java语言的新特性" class="headerlink" title="2. Java语言的新特性"></a>2. Java语言的新特性</h1><p>Java 8是Java的一个重大版本，有人认为，虽然这些新特性领Java开发人员十分期待，但同时也需要花不少精力去学习。在这一小节中，我们将介绍Java 8的大部分新特性。</p><h2 id="2-1-Lambda表达式和函数式接口"><a href="#2-1-Lambda表达式和函数式接口" class="headerlink" title="2.1 Lambda表达式和函数式接口"></a>2.1 Lambda表达式和函数式接口</h2><p>Lambda表达式（也称为闭包）是Java 8中最大和最令人期待的语言改变。它允许我们将函数当成参数传递给某个方法，或者把代码本身当作数据处理：函数式开发者非常熟悉这些概念。很多JVM平台上的语言（Groovy、Scala等）从诞生之日就支持Lambda表达式，但是Java开发者没有选择，只能使用匿名内部类代替Lambda表达式。</p><p>Lambda的设计耗费了很多时间和很大的社区力量，最终找到一种折中的实现方案，可以实现简洁而紧凑的语言结构。最简单的Lambda表达式可由逗号分隔的参数列表、-&gt;符号和语句块组成，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList( <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span> ).forEach( e -&gt; System.out.println( e ) );</span><br></pre></td></tr></table></figure><p>在上面这个代码中的参数e的类型是由编译器推理得出的，你也可以显式指定该参数的类型，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList( <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span> ).forEach( ( String e ) -&gt; System.out.println( e ) );</span><br></pre></td></tr></table></figure><p>如果Lambda表达式需要更复杂的语句块，则可以使用花括号将该语句块括起来，类似于Java中的函数体，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList( <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span> ).forEach( e -&gt; &#123;</span><br><span class="line">    System.out.print( e );</span><br><span class="line">    System.out.print( e );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>Lambda表达式可以引用类成员和局部变量（会将这些变量隐式得转换成final的），例如下列两个代码块的效果完全相同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String separator = <span class="string">","</span>;</span><br><span class="line">Arrays.asList( <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span> ).forEach( </span><br><span class="line">    ( String e ) -&gt; System.out.print( e + separator ) );</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String separator = <span class="string">","</span>;</span><br><span class="line">Arrays.asList( <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span> ).forEach( </span><br><span class="line">    ( String e ) -&gt; System.out.print( e + separator ) );</span><br></pre></td></tr></table></figure><p>Lambda表达式有返回值，返回值的类型也由编译器推理得出。如果Lambda表达式中的语句块只有一行，则可以不用使用return语句，下列两个代码片段效果相同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList( <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span> ).sort( ( e1, e2 ) -&gt; e1.compareTo( e2 ) );</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList( <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span> ).sort( ( e1, e2 ) -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> result = e1.compareTo( e2 );</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>Lambda的设计者们为了让现有的功能与Lambda表达式良好兼容，考虑了很多方法，于是产生了函数接口这个概念。函数接口指的是只有一个函数的接口，这样的接口可以隐式转换为Lambda表达式。java.lang.Runnable和java.util.concurrent.Callable是函数式接口的最佳例子。在实践中，函数式接口非常脆弱：只要某个开发者在该接口中添加一个函数，则该接口就不再是函数式接口进而导致编译失败。为了克服这种代码层面的脆弱性，并显式说明某个接口是函数式接口，Java 8 提供了一个特殊的注解@FunctionalInterface（Java 库中的所有相关接口都已经带有这个注解了），举个简单的函数式接口的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Functional</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过有一点需要注意，默认方法和静态方法不会破坏函数式接口的定义，因此如下的代码是合法的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FunctionalDefaultMethods</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span> </span>&#123;            </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda表达式作为Java 8的最大卖点，它有潜力吸引更多的开发者加入到JVM平台，并在纯Java编程中使用函数式编程的概念。如果你需要了解更多Lambda表达式的细节，可以参考<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="noopener">官方文档</a>。</p><h2 id="2-2-接口的默认方法和静态方法"><a href="#2-2-接口的默认方法和静态方法" class="headerlink" title="2.2 接口的默认方法和静态方法"></a>2.2 接口的默认方法和静态方法</h2><p>Java 8使用两个新概念扩展了接口的含义：默认方法和静态方法。默认方法使得接口有点类似traits，不过要实现的目标不一样。默认方法使得开发者可以在 不破坏二进制兼容性的前提下，往现存接口中添加新的方法，即不强制那些实现了该接口的类也同时实现这个新加的方法。</p><p>默认方法和抽象方法之间的区别在于抽象方法需要实现，而默认方法不需要。接口提供的默认方法会被接口的实现类继承或者覆写，例子代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">Defaulable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Interfaces now allow default methods, the implementer may or </span></span><br><span class="line">    <span class="comment">// may not implement (override) them.</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">notRequired</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Default implementation"</span>; </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultableImpl</span> <span class="keyword">implements</span> <span class="title">Defaulable</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OverridableImpl</span> <span class="keyword">implements</span> <span class="title">Defaulable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">notRequired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Overridden implementation"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Defaulable接口使用关键字default定义了一个默认方法notRequired()。DefaultableImpl类实现了这个接口，同时默认继承了这个接口中的默认方法；OverridableImpl类也实现了这个接口，但覆写了该接口的默认方法，并提供了一个不同的实现。</p><p>Java 8带来的另一个有趣的特性是在接口中可以定义静态方法，例子代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">DefaulableFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Interfaces now allow static methods</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Defaulable <span class="title">create</span><span class="params">( Supplier&lt; Defaulable &gt; supplier )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> supplier.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的代码片段整合了默认方法和静态方法的使用场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> </span>&#123;</span><br><span class="line">    Defaulable defaulable = DefaulableFactory.create( DefaultableImpl::<span class="keyword">new</span> );</span><br><span class="line">    System.out.println( defaulable.notRequired() );</span><br><span class="line"> </span><br><span class="line">    defaulable = DefaulableFactory.create( OverridableImpl::<span class="keyword">new</span> );</span><br><span class="line">    System.out.println( defaulable.notRequired() );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Default implementation</span><br><span class="line">Overridden implementation</span><br></pre></td></tr></table></figure><p>由于JVM上的默认方法的实现在字节码层面提供了支持，因此效率非常高。默认方法允许在不打破现有继承体系的基础上改进接口。该特性在官方库中的应用是：给java.util.Collection接口添加新方法，如stream()、parallelStream()、forEach()和removeIf()等等。</p><p>尽管默认方法有这么多好处，但在实际开发中应该谨慎使用：在复杂的继承体系中，默认方法可能引起歧义和编译错误。如果你想了解更多细节，可以参考<a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html" target="_blank" rel="noopener">官方文档</a>。</p><h2 id="2-3-方法引用"><a href="#2-3-方法引用" class="headerlink" title="2.3 方法引用"></a>2.3 方法引用</h2><p>方法引用使得开发者可以直接引用现存的方法、Java类的构造方法或者实例对象。方法引用和Lambda表达式配合使用，使得java类的构造方法看起来紧凑而简洁，没有很多复杂的模板代码。</p><p>西门的例子中，Car类是不同方法引用的例子，可以帮助读者区分四种类型的方法引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">create</span><span class="params">( <span class="keyword">final</span> Supplier&lt; Car &gt; supplier )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> supplier.get();</span><br><span class="line">    &#125;              </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">collide</span><span class="params">( <span class="keyword">final</span> Car car )</span> </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"Collided "</span> + car.toString() );</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">follow</span><span class="params">( <span class="keyword">final</span> Car another )</span> </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"Following the "</span> + another.toString() );</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">repair</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">        System.out.println( <span class="string">"Repaired "</span> + <span class="keyword">this</span>.toString() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种方法引用的类型是构造器引用，语法是Class::new，或者更一般的形式：Class<t>::new。注意：这个构造器没有参数。</t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Car car = Car.create( Car::<span class="keyword">new</span> );</span><br><span class="line"><span class="keyword">final</span> List&lt; Car &gt; cars = Arrays.asList( car );</span><br></pre></td></tr></table></figure><p>第二种方法引用的类型是静态方法引用，语法是Class::static_method。注意：这个方法接受一个Car类型的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cars.forEach( Car::collide );</span><br></pre></td></tr></table></figure><p>第三种方法引用的类型是某个类的成员方法的引用，语法是Class::method，注意，这个方法没有定义入参：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cars.forEach( Car::repair );</span><br></pre></td></tr></table></figure><p>第四种方法引用的类型是某个实例对象的成员方法的引用，语法是instance::method。注意：这个方法接受一个Car类型的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Car police = Car.create( Car::<span class="keyword">new</span> );</span><br><span class="line">cars.forEach( police::follow );</span><br></pre></td></tr></table></figure><p>运行上述例子，可以在控制台看到如下输出（Car实例可能不同）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Collided com.javacodegeeks.java8.method.references.MethodReferences$Car@<span class="number">7</span>a81197d</span><br><span class="line">Repaired com.javacodegeeks.java8.method.references.MethodReferences$Car@<span class="number">7</span>a81197d</span><br><span class="line">Following the com.javacodegeeks.java8.method.references.MethodReferences$Car@<span class="number">7</span>a81197d</span><br></pre></td></tr></table></figure><p>如果想了解和学习更详细的内容，可以参考<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html" target="_blank" rel="noopener">官方文档</a></p><h2 id="2-4-重复注解"><a href="#2-4-重复注解" class="headerlink" title="2.4 重复注解"></a>2.4 重复注解</h2><p>自从Java 5中引入注解以来，这个特性开始变得非常流行，并在各个框架和项目中被广泛使用。不过，注解有一个很大的限制是：在同一个地方不能多次使用同一个注解。Java 8打破了这个限制，引入了重复注解的概念，允许在同一个地方多次使用同一个注解。</p><p>在Java 8中使用@Repeatable注解定义重复注解，实际上，这并不是语言层面的改进，而是编译器做的一个trick，底层的技术仍然相同。可以利用下面的代码说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javacodegeeks.java8.repeatable.annotations;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepeatingAnnotations</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Target</span>( ElementType.TYPE )</span><br><span class="line">    <span class="meta">@Retention</span>( RetentionPolicy.RUNTIME )</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Filters &#123;</span><br><span class="line">        Filter[] value();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Target</span>( ElementType.TYPE )</span><br><span class="line">    <span class="meta">@Retention</span>( RetentionPolicy.RUNTIME )</span><br><span class="line">    <span class="meta">@Repeatable</span>( Filters.class )</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Filter &#123;</span><br><span class="line">        <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Filter</span>( <span class="string">"filter1"</span> )</span><br><span class="line">    <span class="meta">@Filter</span>( <span class="string">"filter2"</span> )</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Filterable</span> </span>&#123;        </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>( Filter filter: Filterable.class.getAnnotationsByType( Filter.class ) ) &#123;</span><br><span class="line">            System.out.println( filter.value() );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如我们所见，这里的Filter类使用@Repeatable(Filters.class)注解修饰，而Filters是存放Filter注解的容器，编译器尽量对开发者屏蔽这些细节。这样，Filterable接口可以用两个Filter注解注释（这里并没有提到任何关于Filters的信息）。</p><p>另外，反射API提供了一个新的方法：getAnnotationsByType()，可以返回某个类型的重复注解，例如Filterable.class.getAnnoation(Filters.class)将返回两个Filter实例，输出到控制台的内容如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filter1</span><br><span class="line">filter2</span><br></pre></td></tr></table></figure><p>如果你希望了解更多内容，可以参考<a href="https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html" target="_blank" rel="noopener">官方文档</a>。</p><h2 id="2-5-更好的类型推断"><a href="#2-5-更好的类型推断" class="headerlink" title="2.5 更好的类型推断"></a>2.5 更好的类型推断</h2><p>Java 8编译器在类型推断方面有很大的提升，在很多场景下编译器可以推导出某个参数的数据类型，从而使得代码更为简洁。例子代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javacodegeeks.java8.type.inference;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Value</span>&lt; <span class="title">T</span> &gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt; T &gt; <span class="function">T <span class="title">defaultValue</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getOrDefault</span><span class="params">( T value, T defaultValue )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ( value != <span class="keyword">null</span> ) ? value : defaultValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下列代码是Value<string>类型的应用：</string></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javacodegeeks.java8.type.inference;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeInference</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Value&lt; String &gt; value = <span class="keyword">new</span> Value&lt;&gt;();</span><br><span class="line">        value.getOrDefault( <span class="string">"22"</span>, Value.defaultValue() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数Value.defaultValue()的类型由编译器推导得出，不需要显式指明。在Java 7中这段代码会有编译错误，除非使用Value.<string>defaultValue()。</string></p><h2 id="2-6-拓宽注解的应用场景"><a href="#2-6-拓宽注解的应用场景" class="headerlink" title="2.6 拓宽注解的应用场景"></a>2.6 拓宽注解的应用场景</h2><p>Java 8拓宽了注解的应用场景。现在，注解几乎可以使用在任何元素上：局部变量、接口类型、超类和接口实现类，甚至可以用在函数的异常定义上。下面是一些例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javacodegeeks.java8.annotations;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annotations</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Retention</span>( RetentionPolicy.RUNTIME )</span><br><span class="line">    <span class="meta">@Target</span>( &#123; ElementType.TYPE_USE, ElementType.TYPE_PARAMETER &#125; )</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> NonEmpty &#123;        </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span>&lt; @<span class="title">NonEmpty</span> <span class="title">T</span> &gt; <span class="keyword">extends</span> @<span class="title">NonEmpty</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> @NonEmpty Exception </span>&#123;            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@SuppressWarnings</span>( <span class="string">"unused"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Holder&lt; String &gt; holder = <span class="keyword">new</span> <span class="meta">@NonEmpty</span> Holder&lt; String &gt;();        </span><br><span class="line">        <span class="meta">@NonEmpty</span> Collection&lt; <span class="meta">@NonEmpty</span> String &gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ElementType.TYPE_USER和ElementType.TYPE_PARAMETER是Java 8新增的两个注解，用于描述注解的使用场景。Java 语言也做了对应的改变，以识别这些新增的注解。</p><h1 id="3-Java编译器的新特性"><a href="#3-Java编译器的新特性" class="headerlink" title="3. Java编译器的新特性"></a>3. Java编译器的新特性</h1><h2 id="3-1-参数名称"><a href="#3-1-参数名称" class="headerlink" title="3.1 参数名称"></a>3.1 参数名称</h2><p>为了在运行时获得Java程序中方法的参数名称，老一辈的Java程序员必须使用不同方法，例如Paranamer liberary。Java 8终于将这个特性规范化，在语言层面（使用反射API和Parameter.getName()方法）和字节码层面（使用新的javac编译器以及-parameters参数）提供支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javacodegeeks.java8.parameter.names;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterNames</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Method method = ParameterNames.class.getMethod( <span class="string">"main"</span>, String[].class );</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">final</span> Parameter parameter: method.getParameters() ) &#123;</span><br><span class="line">            System.out.println( <span class="string">"Parameter: "</span> + parameter.getName() );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java 8中这个特性是默认关闭的，因此如果不带-parameters参数编译上述代码并运行，则会输出如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parameter: arg0</span><br></pre></td></tr></table></figure><p>如果带-parameters参数，则会输出如下结果（正确的结果）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parameter: args</span><br></pre></td></tr></table></figure><p>如果你使用Maven进行项目管理，则可以在maven-compiler-plugin编译器的配置项中配置-parameters参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;compilerArgument&gt;-parameters&lt;/compilerArgument&gt;</span><br><span class="line">        &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">        &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h1 id="4-Java官方库的新特性"><a href="#4-Java官方库的新特性" class="headerlink" title="4. Java官方库的新特性"></a>4. Java官方库的新特性</h1><p>Java 8增加了很多新的工具类（date/time类），并扩展了现存的工具类，以支持现代的并发编程、函数式编程等。</p><h2 id="4-1-Optional"><a href="#4-1-Optional" class="headerlink" title="4.1 Optional"></a>4.1 Optional</h2><p>Java应用中最常见的bug就是空值异常。在Java 8之前，<a href="https://github.com/google/guava" target="_blank" rel="noopener">Google Guava</a>引入了Optionals类来解决NullPointerException，从而避免源码被各种null检查污染，以便开发者写出更加整洁的代码。Java 8也将Optional加入了官方库。</p><p>Optional仅仅是一个容易：存放T类型的值或者null。它提供了一些有用的接口来避免显式的null检查，可以参考<a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">Java 8官方文档</a>了解更多细节。</p><p>接下来看一点使用Optional的例子：可能为空的值或者某个类型的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt; String &gt; fullName = Optional.ofNullable( <span class="keyword">null</span> );</span><br><span class="line">System.out.println( <span class="string">"Full Name is set? "</span> + fullName.isPresent() );        </span><br><span class="line">System.out.println( <span class="string">"Full Name: "</span> + fullName.orElseGet( () -&gt; <span class="string">"[none]"</span> ) ); </span><br><span class="line">System.out.println( fullName.map( s -&gt; <span class="string">"Hey "</span> + s + <span class="string">"!"</span> ).orElse( <span class="string">"Hey Stranger!"</span> ) );</span><br></pre></td></tr></table></figure><p>如果Optional实例持有一个非空值，则isPresent()方法返回true，否则返回false；orElseGet()方法，Optional实例持有null，则可以接受一个lambda表达式生成的默认值；map()方法可以将现有的Opetional实例的值转换成新的值；orElse()方法与orElseGet()方法类似，但是在持有null的时候返回传入的默认值。</p><p>上述代码的输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Full Name is set? <span class="keyword">false</span></span><br><span class="line">Full Name: [none]</span><br><span class="line">Hey Stranger!</span><br></pre></td></tr></table></figure><p>再看下另一个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt; String &gt; firstName = Optional.of( <span class="string">"Tom"</span> );</span><br><span class="line">System.out.println( <span class="string">"First Name is set? "</span> + firstName.isPresent() );        </span><br><span class="line">System.out.println( <span class="string">"First Name: "</span> + firstName.orElseGet( () -&gt; <span class="string">"[none]"</span> ) ); </span><br><span class="line">System.out.println( firstName.map( s -&gt; <span class="string">"Hey "</span> + s + <span class="string">"!"</span> ).orElse( <span class="string">"Hey Stranger!"</span> ) );</span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><p>这个例子的输出是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">First Name is set? true</span><br><span class="line">First Name: Tom</span><br><span class="line">Hey Tom!</span><br></pre></td></tr></table></figure><p>如果想了解更多的细节，请参考<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html" target="_blank" rel="noopener">官方文档</a>。</p><h2 id="4-2-Streams"><a href="#4-2-Streams" class="headerlink" title="4.2 Streams"></a>4.2 Streams</h2><p>新增的Stream API（java.util.stream）将生成环境的函数式编程引入了Java库中。这是目前为止最大的一次对Java库的完善，以便开发者能够写出更加有效、更加简洁和紧凑的代码。</p><p>Steam API极大得简化了集合操作（后面我们会看到不止是集合），首先看下这个叫Task的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Streams</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> Status &#123;</span><br><span class="line">        OPEN, CLOSED</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Status status;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer points;</span><br><span class="line"> </span><br><span class="line">        Task( <span class="keyword">final</span> Status status, <span class="keyword">final</span> Integer points ) &#123;</span><br><span class="line">            <span class="keyword">this</span>.status = status;</span><br><span class="line">            <span class="keyword">this</span>.points = points;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getPoints</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> points;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> Status <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> String.format( <span class="string">"[%s, %d]"</span>, status, points );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Task类有一个分数（或伪复杂度）的概念，另外还有两种状态：OPEN或者CLOSED。现在假设有一个task集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Collection&lt; Task &gt; tasks = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> Task( Status.OPEN, <span class="number">5</span> ),</span><br><span class="line">    <span class="keyword">new</span> Task( Status.OPEN, <span class="number">13</span> ),</span><br><span class="line">    <span class="keyword">new</span> Task( Status.CLOSED, <span class="number">8</span> ) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>首先看一个问题：在这个task集合中一共有多少个OPEN状态的点？在Java 8之前，要解决这个问题，则需要使用foreach循环遍历task集合；但是在Java 8中可以利用steams解决：包括一系列元素的列表，并且支持顺序和并行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Calculate total points of all active tasks using sum()</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> totalPointsOfOpenTasks = tasks</span><br><span class="line">    .stream()</span><br><span class="line">    .filter( task -&gt; task.getStatus() == Status.OPEN )</span><br><span class="line">    .mapToInt( Task::getPoints )</span><br><span class="line">    .sum();</span><br><span class="line"> </span><br><span class="line">System.out.println( <span class="string">"Total points: "</span> + totalPointsOfOpenTasks );</span><br></pre></td></tr></table></figure><p>运行这个方法的控制台输出是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Total points: 18</span><br></pre></td></tr></table></figure><p>这里有很多知识点值得说。首先，tasks集合被转换成steam表示；其次，在steam上的filter操作会过滤掉所有CLOSED的task；第三，mapToInt操作基于每个task实例的Task::getPoints方法将task流转换成Integer集合；最后，通过sum方法计算总和，得出最后的结果。</p><p>在学习下一个例子之前，还需要记住一些steams（<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps" target="_blank" rel="noopener">点此更多细节</a>）的知识点。Steam之上的操作可分为中间操作和晚期操作。</p><p>中间操作会返回一个新的steam——执行一个中间操作（例如filter）并不会执行实际的过滤操作，而是创建一个新的steam，并将原steam中符合条件的元素放入新创建的steam。</p><p>晚期操作（例如forEach或者sum），会遍历steam并得出结果或者附带结果；在执行晚期操作之后，steam处理线已经处理完毕，就不能使用了。在几乎所有情况下，晚期操作都是立刻对steam进行遍历。</p><p>steam的另一个价值是创造性地支持并行处理（parallel processing）。对于上述的tasks集合，我们可以用下面的代码计算所有任务的点数之和：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Calculate total points of all tasks</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> totalPoints = tasks</span><br><span class="line">   .stream()</span><br><span class="line">   .parallel()</span><br><span class="line">   .map( task -&gt; task.getPoints() ) <span class="comment">// or map( Task::getPoints ) </span></span><br><span class="line">   .reduce( <span class="number">0</span>, Integer::sum );</span><br><span class="line"> </span><br><span class="line">System.out.println( <span class="string">"Total points (all tasks): "</span> + totalPoints );</span><br></pre></td></tr></table></figure><p>这里我们使用parallel方法并行处理所有的task，并使用reduce方法计算最终的结果。控制台输出如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Total points（all tasks）: <span class="number">26.0</span></span><br></pre></td></tr></table></figure><p>对于一个集合，经常需要根据某些条件对其中的元素分组。利用steam提供的API可以很快完成这类任务，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Group tasks by their status</span></span><br><span class="line"><span class="keyword">final</span> Map&lt; Status, List&lt; Task &gt; &gt; map = tasks</span><br><span class="line">    .stream()</span><br><span class="line">    .collect( Collectors.groupingBy( Task::getStatus ) );</span><br><span class="line">System.out.println( map );</span><br></pre></td></tr></table></figure><p>控制台的输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;CLOSED=[[CLOSED, 8]], OPEN=[[OPEN, 5], [OPEN, 13]]&#125;</span><br></pre></td></tr></table></figure><p>最后一个关于tasks集合的例子问题是：如何计算集合中每个任务的点数在集合中所占的比重，具体处理的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Calculate the weight of each tasks (as percent of total points) </span></span><br><span class="line"><span class="keyword">final</span> Collection&lt; String &gt; result = tasks</span><br><span class="line">    .stream()                                        <span class="comment">// Stream&lt; String &gt;</span></span><br><span class="line">    .mapToInt( Task::getPoints )                     <span class="comment">// IntStream</span></span><br><span class="line">    .asLongStream()                                  <span class="comment">// LongStream</span></span><br><span class="line">    .mapToDouble( points -&gt; points / totalPoints )   <span class="comment">// DoubleStream</span></span><br><span class="line">    .boxed()                                         <span class="comment">// Stream&lt; Double &gt;</span></span><br><span class="line">    .mapToLong( weigth -&gt; ( <span class="keyword">long</span> )( weigth * <span class="number">100</span> ) ) <span class="comment">// LongStream</span></span><br><span class="line">    .mapToObj( percentage -&gt; percentage + <span class="string">"%"</span> )      <span class="comment">// Stream&lt; String&gt; </span></span><br><span class="line">    .collect( Collectors.toList() );                 <span class="comment">// List&lt; String &gt; </span></span><br><span class="line"> </span><br><span class="line">System.out.println( result );</span><br></pre></td></tr></table></figure><p>控制台输出结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[19%, 50%, 30%]</span><br></pre></td></tr></table></figure><p>最后，正如之前所说，Steam API不仅可以作用于Java集合，传统的IO操作（从文件或者网络一行一行得读取数据）可以受益于steam处理，这里有一个小例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Path path = <span class="keyword">new</span> File( filename ).toPath();</span><br><span class="line"><span class="keyword">try</span>( Stream&lt; String &gt; lines = Files.lines( path, StandardCharsets.UTF_8 ) ) &#123;</span><br><span class="line">    lines.onClose( () -&gt; System.out.println(<span class="string">"Done!"</span>) ).forEach( System.out::println );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stream的方法onClose 返回一个等价的有额外句柄的Stream，当Stream的close（）方法被调用的时候这个句柄会被执行。Stream API、Lambda表达式还有接口默认方法和静态方法支持的方法引用，是Java 8对软件开发的现代范式的响应。</p><h2 id="4-3-Date-Time-API-JSR-310"><a href="#4-3-Date-Time-API-JSR-310" class="headerlink" title="4.3 Date/Time API(JSR 310)"></a>4.3 Date/Time API(JSR 310)</h2><p>Java 8引入了新的Date-Time API(JSR 310)来改进时间、日期的处理。时间和日期的管理一直是最令Java开发者痛苦的问题。java.util.Date和后来的java.util.Calendar一直没有解决这个问题（甚至令开发者更加迷茫）。</p><p>因为上面这些原因，诞生了第三方库Joda-Time，可以替代Java的时间管理API。Java 8中新的时间和日期管理API深受Joda-Time影响，并吸收了很多Joda-Time的精华。新的java.time包包含了所有关于日期、时间、时区、Instant（跟日期类似但是精确到纳秒）、duration（持续时间）和时钟操作的类。新设计的API认真考虑了这些类的不变性（从java.util.Calendar吸取的教训），如果某个实例需要修改，则返回一个新的对象。</p><p>我们接下来看看java.time包中的关键类和各自的使用例子。首先，Clock类使用时区来返回当前的纳秒时间和日期。Clock可以替代System.currentTimeMillis()和TimeZone.getDefault()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the system clock as UTC offset </span></span><br><span class="line"><span class="keyword">final</span> Clock clock = Clock.systemUTC();</span><br><span class="line">System.out.println( clock.instant() );</span><br><span class="line">System.out.println( clock.millis() );</span><br></pre></td></tr></table></figure><p>这个例子的输出结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2014-04-12T15:19:29.282Z</span><br><span class="line">1397315969360</span><br></pre></td></tr></table></figure><p>第二，关注下LocalDate和LocalTime类。LocalDate仅仅包含ISO-8601日历系统中的日期部分；LocalTime则仅仅包含该日历系统中的时间部分。这两个类的对象都可以使用Clock对象构建得到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the local date and local time</span></span><br><span class="line"><span class="keyword">final</span> LocalDate date = LocalDate.now();</span><br><span class="line"><span class="keyword">final</span> LocalDate dateFromClock = LocalDate.now( clock );</span><br><span class="line"> </span><br><span class="line">System.out.println( date );</span><br><span class="line">System.out.println( dateFromClock );</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Get the local date and local time</span></span><br><span class="line"><span class="keyword">final</span> LocalTime time = LocalTime.now();</span><br><span class="line"><span class="keyword">final</span> LocalTime timeFromClock = LocalTime.now( clock );</span><br><span class="line"> </span><br><span class="line">System.out.println( time );</span><br><span class="line">System.out.println( timeFromClock );</span><br></pre></td></tr></table></figure><p>上述例子的输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2014-04-12</span><br><span class="line">2014-04-12</span><br><span class="line">11:25:54.568</span><br><span class="line">15:25:54.568</span><br></pre></td></tr></table></figure><p>LocalDateTime类包含了LocalDate和LocalTime的信息，但是不包含ISO-8601日历系统中的时区信息。这里有一些关于LocalDate和LocalTime的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the local date/time</span></span><br><span class="line"><span class="keyword">final</span> LocalDateTime datetime = LocalDateTime.now();</span><br><span class="line"><span class="keyword">final</span> LocalDateTime datetimeFromClock = LocalDateTime.now( clock );</span><br><span class="line"> </span><br><span class="line">System.out.println( datetime );</span><br><span class="line">System.out.println( datetimeFromClock );</span><br></pre></td></tr></table></figure><p>上述这个例子的输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2014-04-12T11:37:52.309</span><br><span class="line">2014-04-12T15:37:52.309</span><br></pre></td></tr></table></figure><p>如果你需要特定时区的data/time信息，则可以使用ZoneDateTime，它保存有ISO-8601日期系统的日期和时间，而且有时区信息。下面是一些使用不同时区的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Get the zoned date/time</span><br><span class="line">final ZonedDateTime zonedDatetime = ZonedDateTime.now();</span><br><span class="line">final ZonedDateTime zonedDatetimeFromClock = ZonedDateTime.now( clock );</span><br><span class="line">final ZonedDateTime zonedDatetimeFromZone = ZonedDateTime.now( ZoneId.of( &quot;America/Los_Angeles&quot; ) );</span><br><span class="line"> </span><br><span class="line">System.out.println( zonedDatetime );</span><br><span class="line">System.out.println( zonedDatetimeFromClock );</span><br><span class="line">System.out.println( zonedDatetimeFromZone );</span><br></pre></td></tr></table></figure><p>这个例子的输出结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2014-04-12T11:47:01.017-04:00[America/New_York]</span><br><span class="line">2014-04-12T15:47:01.017Z</span><br><span class="line">2014-04-12T08:47:01.017-07:00[America/Los_Angeles]</span><br></pre></td></tr></table></figure><p>最后看下Duration类，它持有的时间精确到秒和纳秒。这使得我们可以很容易得计算两个日期之间的不同，例子代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Get duration between two dates</span><br><span class="line">final LocalDateTime from = LocalDateTime.of( 2014, Month.APRIL, 16, 0, 0, 0 );</span><br><span class="line">final LocalDateTime to = LocalDateTime.of( 2015, Month.APRIL, 16, 23, 59, 59 );</span><br><span class="line"> </span><br><span class="line">final Duration duration = Duration.between( from, to );</span><br><span class="line">System.out.println( &quot;Duration in days: &quot; + duration.toDays() );</span><br><span class="line">System.out.println( &quot;Duration in hours: &quot; + duration.toHours() );</span><br></pre></td></tr></table></figure><p>这个例子用于计算2014年4月16日和2015年4月16日之间的天数和小时数，输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Duration in days: 365</span><br><span class="line">Duration in hours: 8783</span><br></pre></td></tr></table></figure><p>对于Java 8的新日期时间的总体印象还是比较积极的，一部分是因为Joda-Time的积极影响，另一部分是因为官方终于听取了开发人员的需求。如果希望了解更多细节，可以参考<a href="https://docs.oracle.com/javase/tutorial/datetime/index.html" target="_blank" rel="noopener">官方文档</a>。</p><h2 id="4-4-Nashorn-JavaScript引擎"><a href="#4-4-Nashorn-JavaScript引擎" class="headerlink" title="4.4 Nashorn JavaScript引擎"></a>4.4 Nashorn JavaScript引擎</h2><p>Java 8提供了新的Nashorn JavaScript引擎，使得我们可以在JVM上开发和运行JS应用。Nashorn JavaScript引擎是javax.script.ScriptEngine的另一个实现版本，这类Script引擎遵循相同的规则，允许Java和JavaScript交互使用，例子代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ScriptEngineManager manager = <span class="keyword">new</span> ScriptEngineManager();</span><br><span class="line">ScriptEngine engine = manager.getEngineByName( <span class="string">"JavaScript"</span> );</span><br><span class="line"> </span><br><span class="line">System.out.println( engine.getClass().getName() );</span><br><span class="line">System.out.println( <span class="string">"Result:"</span> + engine.eval( <span class="string">"function f() &#123; return 1; &#125;; f() + 1;"</span> ) );</span><br></pre></td></tr></table></figure><p>这个代码的输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jdk.nashorn.api.scripting.NashornScriptEngine</span><br><span class="line">Result: 2</span><br></pre></td></tr></table></figure><h2 id="4-5-Base64"><a href="#4-5-Base64" class="headerlink" title="4.5 Base64"></a>4.5 Base64</h2><p>对Base64编码的支持已经被加入到Java 8官方库中，这样不需要使用第三方库就可以进行Base64编码，例子代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javacodegeeks.java8.base64;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64s</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String text = <span class="string">"Base64 finally in Java 8!"</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">final</span> String encoded = Base64</span><br><span class="line">            .getEncoder()</span><br><span class="line">            .encodeToString( text.getBytes( StandardCharsets.UTF_8 ) );</span><br><span class="line">        System.out.println( encoded );</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">final</span> String decoded = <span class="keyword">new</span> String( </span><br><span class="line">            Base64.getDecoder().decode( encoded ),</span><br><span class="line">            StandardCharsets.UTF_8 );</span><br><span class="line">        System.out.println( decoded );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子的输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QmFzZTY0IGZpbmFsbHkgaW4gSmF2YSA4IQ==</span><br><span class="line">Base64 finally in Java 8!</span><br></pre></td></tr></table></figure><p>新的Base64API也支持URL和MINE的编码解码。<br>(Base64.getUrlEncoder() / Base64.getUrlDecoder(), Base64.getMimeEncoder() / Base64.getMimeDecoder())。</p><h2 id="4-6-并行数组"><a href="#4-6-并行数组" class="headerlink" title="4.6 并行数组"></a>4.6 并行数组</h2><p>Java8版本新增了很多新的方法，用于支持并行数组处理。最重要的方法是parallelSort()，可以显著加快多核机器上的数组排序。下面的例子论证了parallexXxx系列的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.javacodegeeks.java8.parallel.arrays;</span><br><span class="line"> </span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.concurrent.ThreadLocalRandom;</span><br><span class="line"> </span><br><span class="line">public class ParallelArrays &#123;</span><br><span class="line">    public static void main( String[] args ) &#123;</span><br><span class="line">        long[] arrayOfLong = new long [ 20000 ];        </span><br><span class="line"> </span><br><span class="line">        Arrays.parallelSetAll( arrayOfLong, </span><br><span class="line">            index -&gt; ThreadLocalRandom.current().nextInt( 1000000 ) );</span><br><span class="line">        Arrays.stream( arrayOfLong ).limit( 10 ).forEach( </span><br><span class="line">            i -&gt; System.out.print( i + &quot; &quot; ) );</span><br><span class="line">        System.out.println();</span><br><span class="line"> </span><br><span class="line">        Arrays.parallelSort( arrayOfLong );        </span><br><span class="line">        Arrays.stream( arrayOfLong ).limit( 10 ).forEach( </span><br><span class="line">            i -&gt; System.out.print( i + &quot; &quot; ) );</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述这些代码使用parallelSetAll()方法生成20000个随机数，然后使用parallelSort()方法进行排序。这个程序会输出乱序数组和排序数组的前10个元素。上述例子的代码输出的结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unsorted: 591217 891976 443951 424479 766825 351964 242997 642839 119108 552378 </span><br><span class="line">Sorted: 39 220 263 268 325 607 655 678 723 793</span><br></pre></td></tr></table></figure><h2 id="4-7-并发性"><a href="#4-7-并发性" class="headerlink" title="4.7 并发性"></a>4.7 并发性</h2><p>基于新增的lambda表达式和steam特性，为Java 8中为java.util.concurrent.ConcurrentHashMap类添加了新的方法来支持聚焦操作；另外，也为java.util.concurrentForkJoinPool类添加了新的方法来支持通用线程池操作（更多内容可以参考我们的并发编程课程）。</p><p>Java 8还添加了新的java.util.concurrent.locks.StampedLock类，用于支持基于容量的锁——该锁有三个模型用于支持读写操作（可以把这个锁当做是java.util.concurrent.locks.ReadWriteLock的替代者）。</p><p>在java.util.concurrent.atomic包中也新增了不少工具类，列举如下：</p><ul><li>DoubleAccumulator</li><li>DoubleAdder</li><li>LongAccumulator</li><li>LongAdder</li></ul><h1 id="5-新的Java工具"><a href="#5-新的Java工具" class="headerlink" title="5. 新的Java工具"></a>5. 新的Java工具</h1><p>Java 8提供了一些新的命令行工具，这部分会讲解一些对开发者最有用的工具。</p><h2 id="5-1-Nashorn引擎：jjs"><a href="#5-1-Nashorn引擎：jjs" class="headerlink" title="5.1 Nashorn引擎：jjs"></a>5.1 Nashorn引擎：jjs</h2><p>jjs是一个基于标准Nashorn引擎的命令行工具，可以接受js源码并执行。例如，我们写一个func.js文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function f() &#123; </span><br><span class="line">     return 1; </span><br><span class="line">&#125;; </span><br><span class="line"> </span><br><span class="line">print( f() + 1 );</span><br></pre></td></tr></table></figure><p>可以在命令行中执行这个命令：jjs func.js，控制台输出结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>如果需要了解细节，可以参考<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jjs.html" target="_blank" rel="noopener">官方文档</a>。</p><h2 id="5-2-类依赖分析器：jdeps"><a href="#5-2-类依赖分析器：jdeps" class="headerlink" title="5.2 类依赖分析器：jdeps"></a>5.2 类依赖分析器：jdeps</h2><p>jdeps是一个相当棒的命令行工具，它可以展示包层级和类层级的Java类依赖关系，它以.class文件、目录或者Jar文件为输入，然后会把依赖关系输出到控制台。</p><p>我们可以利用jedps分析下Spring Framework库，为了让结果少一点，仅仅分析一个JAR文件：org.springframework.core-3.0.5.RELEASE.jar。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdeps org.springframework.core-3.0.5.RELEASE.jar</span><br></pre></td></tr></table></figure><p>这个命令会输出很多结果，我们仅看下其中的一部分：依赖关系按照包分组，如果在classpath上找不到依赖，则显示”not found”.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.core-3.0.5.RELEASE.jar -&gt; C:\Program Files\Java\jdk1.8.0\jre\lib\rt.jar</span><br><span class="line">   org.springframework.core (org.springframework.core-3.0.5.RELEASE.jar)</span><br><span class="line">      -&gt; java.io                                            </span><br><span class="line">      -&gt; java.lang                                          </span><br><span class="line">      -&gt; java.lang.annotation                               </span><br><span class="line">      -&gt; java.lang.ref                                      </span><br><span class="line">      -&gt; java.lang.reflect                                  </span><br><span class="line">      -&gt; java.util                                          </span><br><span class="line">      -&gt; java.util.concurrent                               </span><br><span class="line">      -&gt; org.apache.commons.logging                         not found</span><br><span class="line">      -&gt; org.springframework.asm                            not found</span><br><span class="line">      -&gt; org.springframework.asm.commons                    not found</span><br><span class="line">   org.springframework.core.annotation (org.springframework.core-3.0.5.RELEASE.jar)</span><br><span class="line">      -&gt; java.lang                                          </span><br><span class="line">      -&gt; java.lang.annotation                               </span><br><span class="line">      -&gt; java.lang.reflect                                  </span><br><span class="line">      -&gt; java.util</span><br></pre></td></tr></table></figure><p>更多的细节可以参考<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jdeps.html" target="_blank" rel="noopener">官方文档</a>。</p><h1 id="6-JVM的新特性"><a href="#6-JVM的新特性" class="headerlink" title="6. JVM的新特性"></a>6. JVM的新特性</h1><p>使用Metaspace（JEP 122）代替持久代（PermGen space）。在JVM参数方面，使用-XX:MetaSpaceSize和-XX:MaxMetaspaceSize代替原来的-XX:PermSize和-XX:MaxPermSize。</p><h1 id="7-结论"><a href="#7-结论" class="headerlink" title="7. 结论"></a>7. 结论</h1><p>通过为开发者提供很多能够提高生产力的特性，Java 8使得Java平台前进了一大步。现在还不太适合将Java 8应用在生产系统中，但是在之后的几个月中Java 8的应用率一定会逐步提高（PS:原文时间是2014年5月9日，现在在很多公司Java 8已经成为主流，我司由于体量太大，现在也在一点点上Java 8，虽然慢但是好歹在升级了）。作为开发者，现在应该学习一些Java 8的知识，为升级做好准备。</p><h1 id="8-参考资料"><a href="#8-参考资料" class="headerlink" title="8. 参考资料"></a>8. 参考资料</h1><ul><li><a href="http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html" target="_blank" rel="noopener">What’s New in JDK 8</a></li><li><a href="https://docs.oracle.com/javase/tutorial/" target="_blank" rel="noopener">The Java Tutorials</a></li><li><a href="http://blog.arungupta.me/2014/03/wildfly8-jdk8-netbeans8-javaee7-excellent-combo-enterprise-java/" target="_blank" rel="noopener">WildFly 8, JDK 8, NetBeans 8, Java EE</a></li><li><a href="http://winterbe.com/posts/2014/03/16/java-8-tutorial/" target="_blank" rel="noopener">Java 8 Tutorial</a></li><li><a href="http://marxsoftware.blogspot.ca/2014/03/jdeps.html" target="_blank" rel="noopener">JDK 8 Command-line Static Dependency Checker</a></li><li><a href="http://marxsoftware.blogspot.ca/2014/03/illuminating-javadoc-of-jdk-8.html" target="_blank" rel="noopener">The Illuminating Javadoc of JDK</a></li><li><a href="http://blog.jooq.org/2014/04/04/java-8-friday-the-dark-side-of-java-8/" target="_blank" rel="noopener">The Dark Side of Java 8</a></li><li><a href="http://www.baeldung.com/java8" target="_blank" rel="noopener">Java 8</a></li><li><a href="http://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html" target="_blank" rel="noopener">Oracle Nashorn. A Next-Generation JavaScript Engine for the JVM</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;： Java 8 已经发布很久了，很多报道表明Java 8 是一次重大的版本升级。在Java Code Geeks上已经有很多介绍Java 8新特性的文章，例如Playing with Java 8 – Lambdas and Conc
      
    
    </summary>
    
      <category term="Java" scheme="http://zhaoziqian.top/categories/Java/"/>
    
    
      <category term="Java8" scheme="http://zhaoziqian.top/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>Hyperledger Fabric 1.1.0 简单部署</title>
    <link href="http://zhaoziqian.top/2018/07/23/Hyperledger-Fabric-1-1-0-%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2/"/>
    <id>http://zhaoziqian.top/2018/07/23/Hyperledger-Fabric-1-1-0-简单部署/</id>
    <published>2018-07-23T06:53:50.000Z</published>
    <updated>2018-08-09T05:58:49.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hyperledger-Fabric-1-1-0-简单部署"><a href="#Hyperledger-Fabric-1-1-0-简单部署" class="headerlink" title="Hyperledger Fabric 1.1.0 简单部署"></a>Hyperledger Fabric 1.1.0 简单部署</h3><h4 id="目标：快速启动一个fabric环境"><a href="#目标：快速启动一个fabric环境" class="headerlink" title="目标：快速启动一个fabric环境"></a>目标：快速启动一个fabric环境</h4><h4 id="使用环境：-centos7-最小系统"><a href="#使用环境：-centos7-最小系统" class="headerlink" title="使用环境： centos7 最小系统"></a>使用环境： centos7 最小系统</h4><h4 id="一、安装环境需求软件"><a href="#一、安装环境需求软件" class="headerlink" title="一、安装环境需求软件"></a>一、安装环境需求软件</h4><table><thead><tr><th>是否必须</th><th>软件名</th><th>版本</th><th>描述</th></tr></thead><tbody><tr><td></td><td>curl</td><td></td><td>手动编译时候，可能需要用这个命令下载</td></tr><tr><td></td><td>git</td><td></td><td>拉代码用</td></tr><tr><td>必须</td><td>docker</td><td>1.14+</td><td></td></tr><tr><td>必须</td><td>docker-compose</td><td></td><td></td></tr><tr><td></td><td>golang</td><td>1.10x+</td><td>编译镜像、工具需要</td></tr><tr><td></td><td>node.js</td><td>8.9x+</td><td>编译镜像、工具需要</td></tr><tr><td></td><td>npm</td><td></td><td></td></tr><tr><td></td><td>libtool</td><td></td><td>编译镜像、工具需要</td></tr><tr><td></td><td>libtool-ltdl-devel</td><td></td><td>编译镜像、工具需要</td></tr></tbody></table><hr><p><span style="font-size:30px;"><strong>文档描述</strong></span></p><p>此次部署文档，不使用自己编译镜像和工具的方法。<br><br><br>编译的时候只需要将上面软件安装全，在工程目录执行 make docker，中间可能会出错，一般情况是因为被墙超时，或者资源地址有变动了需要自己找，所以会碰到很多意外。所以使用自己编译的方法总觉得不是很稳。需要对linux操作系统比较熟悉，而且需要多多阅读fabric源码一个个去解决问题。<br><br><br>然而我们简单使用和开发fabric区块链网络，基本是不需要修改基础节点。所以我们只要下载到基础的docker镜像，证书生成，描述文件生成工具，就可以启动区块链网络。<br><br></p><p>但是本次文档的基础版本是基于 github上 ++<strong><em>v1.1.0-rc1 - March 1, 2018</em></strong>++ 版本</p><hr><ol><li>安装docker </li></ol><p>执行使用 yum 命令安装的 docker 经过测试也是可以使用的。但是版本是1.13 fabric官网给的建议是使用1.14以上版本。具体方法如下：</p><p>docker <a href="https://docs.docker.com/install/linux/docker-ce/centos/#set-up-the-repository" target="_blank" rel="noopener">官网安装文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#  移除原有docker，新系统可定是不用操作的</span><br><span class="line">$ yum remove docker \</span><br><span class="line">      docker-client \</span><br><span class="line">      docker-client-latest \</span><br><span class="line">      docker-common \</span><br><span class="line">      docker-latest \</span><br><span class="line">      docker-latest-logrotate \</span><br><span class="line">      docker-logrotate \</span><br><span class="line">      docker-selinux \</span><br><span class="line">      docker-engine-selinux \</span><br><span class="line">      docker-engine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"># 添加docker软件源</span><br><span class="line">$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">$ yum install docker-ce</span><br></pre></td></tr></table></figure><p>此时就开始安转docker客户端，但是安装过程很缓慢，通过查阅docker-ce.repo 文件，找到软件包下载地址<br><a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/" target="_blank" rel="noopener">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a><br>我们就可以访问这个地址，使用迅雷什么的下载工具将对应的软件包下载下来。然后安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ yum localinstall -y /packages/docker-ce/*.rpm --nogpgcheck</span><br><span class="line">$ docker version</span><br><span class="line"></span><br><span class="line">Client:</span><br><span class="line"> Version:18.03.0-ce</span><br><span class="line"> API version:1.37</span><br><span class="line"> Go version:go1.9.4</span><br><span class="line"> Git commit:0520e24</span><br><span class="line"> Built:Wed Mar 21 23:09:15 2018</span><br><span class="line"> OS/Arch:linux/amd64</span><br><span class="line"> Experimental:false</span><br><span class="line"> Orchestrator:swarm</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:18.03.0-ce</span><br><span class="line">  API version:1.37 (minimum version 1.12)</span><br><span class="line">  Go version:go1.9.4</span><br><span class="line">  Git commit:0520e24</span><br><span class="line">  Built:Wed Mar 21 23:13:03 2018</span><br><span class="line">  OS/Arch:linux/amd64</span><br><span class="line">  Experimental:false</span><br></pre></td></tr></table></figure><p>如此安装完毕，然后还需要关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 关闭防火墙</span><br><span class="line">$ systemctl stop firewalld</span><br><span class="line">$ systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"># 关闭selinux</span><br><span class="line"># 查看selinux状态 </span><br><span class="line">$ /usr/sbin/sestatus -v</span><br><span class="line">SELinux status:                 enabled</span><br><span class="line">SELinuxfs mount:                /sys/fs/selinux</span><br><span class="line">....略</span><br><span class="line"></span><br><span class="line">$ sed -ri &quot;s/^SELINUX=enforcing.*/SELINUX=disabled/&quot; /etc/selinux/config</span><br><span class="line"># 重启后再次查看</span><br><span class="line">$ reboot</span><br><span class="line">$ /usr/sbin/sestatus -v</span><br><span class="line">SELinux status:                 disabled</span><br></pre></td></tr></table></figure><p><br></p><ol start="2"><li>安装docker-compose</li></ol><p>可以直接去github上下载， <a href="https://github.com/docker/compose/releases/tag/1.22.0-rc1" target="_blank" rel="noopener">https://github.com/docker/compose/releases/tag/1.22.0-rc1</a>，有linux ，mac ，windows 三个版本。</p><p>linux的可以直接使用迅雷下载这个连接 <a href="https://github.com/docker/compose/releases/download/1.22.0-rc1/docker-compose-Linux-x86_64" target="_blank" rel="noopener">https://github.com/docker/compose/releases/download/1.22.0-rc1/docker-compose-Linux-x86_64</a>，这个下载完后上传到虚拟机里，给文件改名称 docker-compose</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 把docker-compose 移动到bin目录</span><br><span class="line">$ mv ./docker-compose /usr/local/bin</span><br><span class="line">$ chmod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"># 查看docker-compose 版本</span><br><span class="line">$ docker-compose -v</span><br><span class="line">docker-compose version 1.22.1, build 5d8c71b</span><br></pre></td></tr></table></figure><hr><h4 id="二、获取hyperledger-fabric"><a href="#二、获取hyperledger-fabric" class="headerlink" title="二、获取hyperledger fabric"></a>二、获取hyperledger fabric</h4><ol><li>获取hyperledger fabric 源码</li></ol><p>获取源码就比较简单了，直接使用git工具clone下来就可以。但是有些时候我们使用github克隆代码会很缓慢，这里介绍一个小技巧。我们可以通过国内的git平台，如码云，先将项目克隆到码云，然后再从码云克隆，这样可以大大提升代码克隆速度。</p><p>hyperledger fabric github地址为： <a href="https://github.com/hyperledger/fabric" target="_blank" rel="noopener">https://github.com/hyperledger/fabric</a><br><br><br><br></p><ol start="2"><li>获取fabric docker 镜像</li></ol><p>此时就需要使用docker命令拉取fabric基础镜像。具体需要拉取的镜像，其实都在fabric项目提供的脚本中有写到。可以从github上克隆代码查看，或者直接在github上查看。</p><p>../fabric_1.1.0-rc1/fabric-1.1.0-rc1/scripts/bootstrap-1.1.0-preview.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 运行上述目录下的脚本,即可获得1.1.0版本的fabric所需镜像，同时也会下载fabric对应需要的命令行工具</span><br><span class="line"># sh ./bootstrap-1.1.0-preview.sh</span><br></pre></td></tr></table></figure><p>bootstrap-1.1.0-preview.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#</span><br><span class="line"># Copyright IBM Corp. All Rights Reserved.</span><br><span class="line">#</span><br><span class="line"># SPDX-License-Identifier: Apache-2.0</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">export VERSION=1.1.0-preview</span><br><span class="line">export ARCH=$(echo &quot;$(uname -s|tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;|sed &apos;s/mingw64_nt.*/windows/&apos;)-$(uname -m | sed &apos;s/x86_64/amd64/g&apos;)&quot; | awk &apos;&#123;print tolower($0)&#125;&apos;)</span><br><span class="line">#Set MARCH variable i.e ppc64le,s390x,x86_64,i386</span><br><span class="line">MARCH=`uname -m`</span><br><span class="line"></span><br><span class="line">dockerFabricPull() &#123;</span><br><span class="line">  local FABRIC_TAG=$1</span><br><span class="line">  for IMAGES in peer orderer couchdb ccenv javaenv kafka zookeeper tools; do</span><br><span class="line">      echo &quot;==&gt; FABRIC IMAGE: $IMAGES&quot;</span><br><span class="line">      echo</span><br><span class="line">      docker pull hyperledger/fabric-$IMAGES:$FABRIC_TAG</span><br><span class="line">      docker tag hyperledger/fabric-$IMAGES:$FABRIC_TAG hyperledger/fabric-$IMAGES</span><br><span class="line">  done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dockerCaPull() &#123;</span><br><span class="line">      local CA_TAG=$1</span><br><span class="line">      echo &quot;==&gt; FABRIC CA IMAGE&quot;</span><br><span class="line">      echo</span><br><span class="line">      docker pull hyperledger/fabric-ca:$CA_TAG</span><br><span class="line">      docker tag hyperledger/fabric-ca:$CA_TAG hyperledger/fabric-ca</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">: $&#123;CA_TAG:=&quot;$MARCH-$VERSION&quot;&#125;</span><br><span class="line">: $&#123;FABRIC_TAG:=&quot;$MARCH-$VERSION&quot;&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;===&gt; Downloading platform binaries&quot;</span><br><span class="line">curl https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/$&#123;ARCH&#125;-$&#123;VERSION&#125;/hyperledger-fabric-$&#123;ARCH&#125;-$&#123;VERSION&#125;.tar.gz | tar xz</span><br><span class="line"></span><br><span class="line">echo &quot;===&gt; Pulling fabric Images&quot;</span><br><span class="line">dockerFabricPull $&#123;FABRIC_TAG&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;===&gt; Pulling fabric ca Image&quot;</span><br><span class="line">dockerCaPull $&#123;CA_TAG&#125;</span><br><span class="line">echo</span><br><span class="line">echo &quot;===&gt; List out hyperledger docker images&quot;</span><br><span class="line">docker images | grep hyperledger*</span><br></pre></td></tr></table></figure><p>获得的镜像信息如下</p><table><thead><tr><th>镜像名称</th><th>用途</th></tr></thead><tbody><tr><td>hyperledger/fabric-peer:x86_64-1.1.0</td><td>peer模块镜像文件</td></tr><tr><td>hyperledger/fabric-orderer:x86_64-1.1.0</td><td>orderer节点镜像文件 </td></tr><tr><td>hyperledger/fabric-ca:x86_64-1.1.0</td><td>ca模块镜像文件</td></tr><tr><td>hyperledger/fabric-tools:x86_64-1.1.0</td><td>相关工具镜像文件，包含了cryptogen、configtxgen、configtxlator等工具</td></tr><tr><td>hyperledger/fabric-javaenv:x86_64-1.1.0</td><td>java版本的chaincode运行环境镜像文件</td></tr><tr><td>hyperledger/fabric-ccenv:x86_64-1.1.0</td><td>go语言版本的chaincode运行环境镜像文件</td></tr><tr><td>hyperledger/fabric-couchdb:x86_64-0.4.6</td><td>couchdb数据库镜像文件</td></tr><tr><td>hyperledger/fabric-kafka:x86_64-0.4.6</td><td>kafka镜像文件</td></tr><tr><td>hyperledger/fabric-zookeeper:x86_64-0.4.6</td><td>zookeeper 镜像文件</td></tr><tr><td>hyperledger/fabric-baseos:x86_64-0.4.6</td><td>基础镜像文件,其他镜像文件在该文件镜像基础上生成</td></tr></tbody></table><p>下载到这些docker镜像就可以启动一个fabric网络了</p><hr><h4 id="三、启动一个fabric网络"><a href="#三、启动一个fabric网络" class="headerlink" title="三、启动一个fabric网络"></a>三、启动一个fabric网络</h4><p>fabric提供了简单的启动区块链网络的脚本，用来验证和学习。</p><p>../fabric_1.1.0-rc1/fabric-1.1.0-rc1/examples/e2e_cli 目录下是一个简单区块链网络启动脚本，此应用案例是学习区块链网络的最好开始。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 进入到上述目录</span><br><span class="line"></span><br><span class="line"># sh ./network_setup.sh up      --启动区块链网络</span><br><span class="line"></span><br><span class="line"># sh ./network_setup.sh down    --停止区块链网络</span><br><span class="line"></span><br><span class="line"># sh ./network_setup.sh restart --重启区块链网络</span><br></pre></td></tr></table></figure><p>此目录文件结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── base                                </span><br><span class="line">│   ├── docker-compose-base.yaml                -- 启动节点的基础配置</span><br><span class="line">│   └── peer-base.yaml                          -- peer节点的基础配置</span><br><span class="line">├── channel-artifacts                           -- 存放通道描述文件的目录</span><br><span class="line">├── configtx.yaml                               -- 通道节点信息配置文件</span><br><span class="line">├── crypto-config.yaml                          -- 组织证书描述配置文件</span><br><span class="line">├── docker-compose-cli.yaml                     -- cli启动docker描述文件</span><br><span class="line">├── docker-compose-couch.yaml</span><br><span class="line">├── docker-compose-e2e-template.yaml</span><br><span class="line">├── docker-compose-e2e.yaml</span><br><span class="line">├── docker-compose-e2e.yamlt</span><br><span class="line">├── download-dockerimages.sh</span><br><span class="line">├── end-to-end.rst</span><br><span class="line">├── examples</span><br><span class="line">│   └── chaincode</span><br><span class="line">│       └── go</span><br><span class="line">│           └── chaincode_example02</span><br><span class="line">│               └── chaincode_example02.go      -- 案例中使用的智能合约</span><br><span class="line">├── generateArtifacts.sh                        -- 生成证书文件的脚本</span><br><span class="line">├── network_setup.sh                            -- 启停案例的脚本</span><br><span class="line">└── scripts</span><br><span class="line">    └── script.sh                               -- 启动cli容器后执行的脚本</span><br></pre></td></tr></table></figure><p>这些文件中写的命令都比较简单，只要大家稍加阅读。</p><p>正确执行后控制台会输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">2018-08-09 05:45:19.256 UTC [msp] GetLocalMSP -&gt; DEBU 001 Returning existing local MSP</span><br><span class="line">2018-08-09 05:45:19.256 UTC [msp] GetDefaultSigningIdentity -&gt; DEBU 002 Obtaining default signing identity</span><br><span class="line">2018-08-09 05:45:19.256 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 003 Using default escc</span><br><span class="line">2018-08-09 05:45:19.256 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 004 Using default vscc</span><br><span class="line">2018-08-09 05:45:19.257 UTC [msp/identity] Sign -&gt; DEBU 005 Sign: plaintext: 0A94070A6608031A0B08EFA9AFDB0510...6D7963631A0A0A0571756572790A0161</span><br><span class="line">2018-08-09 05:45:19.257 UTC [msp/identity] Sign -&gt; DEBU 006 Sign: digest: 946059E3816AAD43A63F69B65FAA97F3CC2580E31289A90C3768D3DFA0B7EABC</span><br><span class="line">Query Result: 90</span><br><span class="line">2018-08-09 05:45:35.489 UTC [main] main -&gt; INFO 007 Exiting.....</span><br><span class="line">===================== Query on PEER3 on channel 'mychannel' is successful =====================</span><br><span class="line"></span><br><span class="line">===================== All GOOD, End-2-End execution completed =====================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> _____   _   _   ____            _____   ____    _____</span><br><span class="line">| ____| | \ | | |  _ \          | ____| |___ \  | ____|</span><br><span class="line">|  _|   |  \| | | | | |  _____  |  _|     __) | |  _|</span><br><span class="line">| |___  | |\  | | |_| | |_____| | |___   / __/  | |___</span><br><span class="line">|_____| |_| \_| |____/          |_____| |_____| |_____|</span><br></pre></td></tr></table></figure><p>查看 docker 启动的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># docker ps -a</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE                                 COMMAND                  CREATED              STATUS              PORTS                                                                       NAMES</span><br><span class="line">7b23adaaf02a        dev-peer1.org2.example.com-mycc-1.0   &quot;chaincode -peer.add…&quot;   About a minute ago   Up About a minute                                                                               dev-peer1.org2.example.com-mycc-1.0</span><br><span class="line">6b0639663c35        dev-peer0.org1.example.com-mycc-1.0   &quot;chaincode -peer.add…&quot;   About a minute ago   Up About a minute                                                                               dev-peer0.org1.example.com-mycc-1.0</span><br><span class="line">31515c9e0a8a        dev-peer0.org2.example.com-mycc-1.0   &quot;chaincode -peer.add…&quot;   2 minutes ago        Up 2 minutes                                                                                    dev-peer0.org2.example.com-mycc-1.0</span><br><span class="line">0e0c5ce69d46        hyperledger/fabric-tools              &quot;/bin/bash&quot;              6 minutes ago        Up 6 minutes                                                                                    cli</span><br><span class="line">7e25183fd0c6        hyperledger/fabric-peer               &quot;peer node start&quot;        6 minutes ago        Up 6 minutes        0.0.0.0:7051-7053-&gt;7051-7053/tcp                                            peer0.org1.example.com</span><br><span class="line">12e042162c0c        hyperledger/fabric-peer               &quot;peer node start&quot;        6 minutes ago        Up 6 minutes        0.0.0.0:8051-&gt;7051/tcp, 0.0.0.0:8052-&gt;7052/tcp, 0.0.0.0:8053-&gt;7053/tcp      peer1.org1.example.com</span><br><span class="line">e5e28c41d04b        hyperledger/fabric-peer               &quot;peer node start&quot;        6 minutes ago        Up 6 minutes        0.0.0.0:9051-&gt;7051/tcp, 0.0.0.0:9052-&gt;7052/tcp, 0.0.0.0:9053-&gt;7053/tcp      peer0.org2.example.com</span><br><span class="line">1080a465b6f1        hyperledger/fabric-orderer            &quot;orderer&quot;                6 minutes ago        Up 6 minutes        0.0.0.0:7050-&gt;7050/tcp                                                      orderer.example.com</span><br><span class="line">e4c232e01c6a        hyperledger/fabric-peer               &quot;peer node start&quot;        6 minutes ago        Up 6 minutes        0.0.0.0:10051-&gt;7051/tcp, 0.0.0.0:10052-&gt;7052/tcp, 0.0.0.0:10053-&gt;7053/tcp   peer1.org2.example.com</span><br></pre></td></tr></table></figure><hr><h4 id="四、可能会在启动中遇到的问题"><a href="#四、可能会在启动中遇到的问题" class="headerlink" title="四、可能会在启动中遇到的问题"></a>四、可能会在启动中遇到的问题</h4><ol><li>没有找到生成配置文件的工具 cryptogen、configtxgen、configtxlator 这些。此时就需要读者去确认，执行bootstrap-1.1.0-preview.sh这个脚本，有没有正确的完整执行完。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/$&#123;ARCH&#125;-$&#123;VERSION&#125;/hyperledger-fabric-$&#123;ARCH&#125;-$&#123;VERSION&#125;.tar.gz | tar xz</span><br><span class="line"></span><br><span class="line">-- 脚本文件中，这条命令就是下载上述工具的命令，有时候会因为网络原因下载缓慢，读者可以自行将命令中变量补全，用其他下载工具下载。</span><br></pre></td></tr></table></figure><p>然后再确认 generateArtifacts.sh 脚本中获得上述命令行工具的地址，和你下载存放的地址是否对应。</p><ol start="2"><li>也可能在启动过程中 遇到一个 docker network的问题，这个问题是在 ./base/peer-base.yaml 中一个配置的原因。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># Copyright IBM Corp. All Rights Reserved.</span><br><span class="line">#</span><br><span class="line"># SPDX-License-Identifier: Apache-2.0</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">version: &apos;2&apos;</span><br><span class="line">services:</span><br><span class="line">  peer-base:</span><br><span class="line">    image: hyperledger/fabric-peer</span><br><span class="line">    environment:</span><br><span class="line">      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span><br><span class="line">      # the following setting starts chaincode containers on the same</span><br><span class="line">      # bridge network as the peers</span><br><span class="line">      # https://docs.docker.com/compose/networking/</span><br><span class="line">      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=e2ecli_default        --就这行，修改其值与之对应即可</span><br><span class="line">      #- CORE_LOGGING_LEVEL=ERROR</span><br><span class="line">      - CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">      - CORE_PEER_TLS_ENABLED=true</span><br><span class="line">      - CORE_PEER_GOSSIP_USELEADERELECTION=true</span><br><span class="line">      - CORE_PEER_GOSSIP_ORGLEADER=false</span><br><span class="line">      - CORE_PEER_PROFILE_ENABLED=true</span><br><span class="line">      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span><br><span class="line">      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span><br><span class="line">      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span><br><span class="line">    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer</span><br><span class="line">    command: peer node start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hyperledger-Fabric-1-1-0-简单部署&quot;&gt;&lt;a href=&quot;#Hyperledger-Fabric-1-1-0-简单部署&quot; class=&quot;headerlink&quot; title=&quot;Hyperledger Fabric 1.1.0 简单部署&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="区块链" scheme="http://zhaoziqian.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hyperledger fabric" scheme="http://zhaoziqian.top/tags/Hyperledger-fabric/"/>
    
      <category term="区块链" scheme="http://zhaoziqian.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>fabric-sdk-node 日志等级设置</title>
    <link href="http://zhaoziqian.top/2018/06/20/fabric-sdk-node-%E6%97%A5%E5%BF%97%E7%AD%89%E7%BA%A7%E8%AE%BE%E7%BD%AE/"/>
    <id>http://zhaoziqian.top/2018/06/20/fabric-sdk-node-日志等级设置/</id>
    <published>2018-06-20T11:39:10.000Z</published>
    <updated>2018-06-20T11:43:10.634Z</updated>
    
    <content type="html"><![CDATA[<h3 id="fabric-sdk-node-日志等级设置"><a href="#fabric-sdk-node-日志等级设置" class="headerlink" title="fabric-sdk-node 日志等级设置"></a>fabric-sdk-node 日志等级设置</h3><p>在我们使用 fabric-sdk-node 开发客户端的时候，默认的fabric-sdk-node日志等级是info。有很多sdk带有的日志，都是debug的。需要设置一下日志等级将日志显示出来。</p><p>通过查看fabric-sdk-node代码，在fabric-client的包下的utils.js里设置着fabric-sdk-node所使用的默认日志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">// Internal API.</span><br><span class="line">//</span><br><span class="line">// Get the standard logger to use throughout the SDK code. If the client application has</span><br><span class="line">// configured a logger, then that&apos;ll be returned.</span><br><span class="line">//</span><br><span class="line">// The user can also make user of the built-in &quot;winston&quot; based logger and use the environment</span><br><span class="line">// variable HFC_LOGGING to pass in configurations in the following format:</span><br><span class="line">//</span><br><span class="line">// &#123;</span><br><span class="line">//   &apos;error&apos;: &apos;error.log&apos;,// &apos;error&apos; logs are printed to file &apos;error.log&apos; relative of the current working dir for node.js</span><br><span class="line">//   &apos;debug&apos;: &apos;/tmp/myapp/debug.log&apos;,// &apos;debug&apos; and anything more critical (&apos;info&apos;, &apos;warn&apos;, &apos;error&apos;) can also be an absolute path</span><br><span class="line">//   &apos;info&apos;: &apos;console&apos;// &apos;console&apos; is a keyword for logging to console</span><br><span class="line">// &#125;</span><br><span class="line">//</span><br><span class="line">module.exports.getLogger = function(name) &#123;</span><br><span class="line">var saveLogger = function(logger) &#123;</span><br><span class="line">if (global.hfc) &#123;</span><br><span class="line">global.hfc.logger = logger;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">global.hfc = &#123;</span><br><span class="line">logger: logger</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>大体意思就是说，这个日志只是使用在sdk内容，用户可以自己构造日志对象。也提供了示例格式。只需要在项目中加入环境变量 HFC_LOGGING </p><p>我们要想将日志等级设置成 debug 就可以编译以及json串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;error&quot;:&quot;error.log&quot;,</span><br><span class="line">    &quot;debug&quot;:&quot;/tmp/myapp/debug.log&quot;,</span><br><span class="line">    &quot;debug&quot;:&quot;console&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后设置到启动时的环境变量里。我使用的webstorm，设置如下图。</p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-20/72427900.jpg" alt="fabric-sdk-node设置日志1"><br><br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-20/90288625.jpg" alt="fabric-sdk-node设置日志1"><br><br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-20/83819818.jpg" alt="fabric-sdk-node设置日志1"><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;fabric-sdk-node-日志等级设置&quot;&gt;&lt;a href=&quot;#fabric-sdk-node-日志等级设置&quot; class=&quot;headerlink&quot; title=&quot;fabric-sdk-node 日志等级设置&quot;&gt;&lt;/a&gt;fabric-sdk-node 日志等级
      
    
    </summary>
    
      <category term="区块链" scheme="http://zhaoziqian.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hyperledger fabric" scheme="http://zhaoziqian.top/tags/Hyperledger-fabric/"/>
    
      <category term="区块链" scheme="http://zhaoziqian.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="node.js" scheme="http://zhaoziqian.top/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Mac使用VMware Fusion建立centos7最小系统虚拟机</title>
    <link href="http://zhaoziqian.top/2018/06/19/Mac%E4%BD%BF%E7%94%A8VMware-Fusion%E5%BB%BA%E7%AB%8Bcentos7%E6%9C%80%E5%B0%8F%E7%B3%BB%E7%BB%9F%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>http://zhaoziqian.top/2018/06/19/Mac使用VMware-Fusion建立centos7最小系统虚拟机/</id>
    <published>2018-06-18T16:35:08.000Z</published>
    <updated>2018-06-18T16:41:41.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac使用VMware-Fusion建立centos7最小系统虚拟机"><a href="#Mac使用VMware-Fusion建立centos7最小系统虚拟机" class="headerlink" title="Mac使用VMware Fusion建立centos7最小系统虚拟机"></a>Mac使用VMware Fusion建立centos7最小系统虚拟机</h2><p>创建虚拟机过程很简单，大体步骤参考下图就可以。<br></p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-19/88639698.jpg" alt="建立centos7虚拟机1"><br><br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-19/63313328.jpg" alt="建立centos7虚拟机2"><br><br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-19/2229613.jpg" alt="建立centos7虚拟机3"><br><br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-19/40555945.jpg" alt="建立centos7虚拟机4"><br><br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-19/78032991.jpg" alt="建立centos7虚拟机5"><br><br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-19/45104517.jpg" alt="建立centos7虚拟机6"><br><br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-19/87422918.jpg" alt="建立centos7虚拟机7"><br><br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-19/93057410.jpg" alt="建立centos7虚拟机8"><br><br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-19/83744513.jpg" alt="建立centos7虚拟机9"><br></p><hr><p><strong> 配置网络 </strong><br>当虚拟机创建好之后，一般有两种网络连接方式，一种是dhcp，一种net。dhcp就是指桥接，在使用过程中网络环境发生变化，虚拟机系统就会给虚拟机分配新的ip，这样每次开机虚拟机的ip不同十分影响使用。所以需要将虚拟机的ip设置为net模式。<br><br>在这之后虚拟机，还可以修改虚拟机的配置，自己分配ip地址给虚拟机。<br><br>登录虚拟机终端后需要修改的配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 修改对应的网络配置文件</span><br><span class="line"># cd /etc/sysconfig/network-script/</span><br></pre></td></tr></table></figure><p><strong>查看目录下的文件列表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># ll</span><br><span class="line"></span><br><span class="line">[root@localhost network-scripts]# ll</span><br><span class="line">总用量 224</span><br><span class="line">-rw-r--r--. 1 root root   421 4月   8 11:02 ifcfg-ens33</span><br><span class="line">-rw-r--r--. 1 root root   254 5月   3 2017 ifcfg-lo</span><br><span class="line">......略</span><br><span class="line">-rw-r--r--. 1 root root 31027 5月   3 2017 network-functions-ipv6</span><br><span class="line"></span><br><span class="line"># 这个目录里保存的都是网卡配置信息，我们只需要修改ifcfg-ensXX 【XX代表数字】。</span><br></pre></td></tr></table></figure></p><p><strong>修改内容如下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">#BOOTPROTO=&quot;dhcp&quot;         -- 我们不是用桥接,所以注释</span><br><span class="line">BOOTPROTO=&quot;static&quot;        -- 使用静态IP</span><br><span class="line">IPADDR=&quot;192.168.48.110&quot;   --  IP地址</span><br><span class="line">NETMASH=&quot;255.255.255.0&quot;   -- 子网掩码</span><br><span class="line">GATEWAY=&quot;192.168.48.2&quot;    --  网关，需要在虚拟机软件上设置</span><br><span class="line">DNS1=&quot;192.168.48.2&quot;       -- DNS服务地址</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;8f0e86f9-a8be-4477-a8d8-6377e0b14e68&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br></pre></td></tr></table></figure><p>只用修改带描述的配置行。其他的不用修改。本机网关地址在虚拟机软件配置文件里。Mac系统下，在目录/资源库/Preferences/VMware Fusion/vmnet8/nat.conf 文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># NAT gateway address</span><br><span class="line">ip = 192.168.48.2</span><br><span class="line">netmask = 255.255.255.0</span><br></pre></td></tr></table></figure><p>根据个人机器配置对应设置就可以。最后重启网络服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># service network restart</span><br><span class="line"># 再次查看ip</span><br><span class="line"># ip addr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost network-scripts]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 00:0c:29:cd:5a:f1 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.48.110/24 brd 192.168.48.255 scope global ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::5a5e:cb38:6b09:9fea/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>以上一台新鲜的虚拟机就可以使用了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mac使用VMware-Fusion建立centos7最小系统虚拟机&quot;&gt;&lt;a href=&quot;#Mac使用VMware-Fusion建立centos7最小系统虚拟机&quot; class=&quot;headerlink&quot; title=&quot;Mac使用VMware Fusion建立cent
      
    
    </summary>
    
      <category term="mac系统" scheme="http://zhaoziqian.top/categories/mac%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="mac" scheme="http://zhaoziqian.top/tags/mac/"/>
    
      <category term="centos7" scheme="http://zhaoziqian.top/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>使用HEXO搭建个人博客记录</title>
    <link href="http://zhaoziqian.top/2018/06/16/%E4%BD%BF%E7%94%A8HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    <id>http://zhaoziqian.top/2018/06/16/使用HEXO搭建个人博客记录/</id>
    <published>2018-06-16T06:14:04.000Z</published>
    <updated>2018-06-16T06:34:16.113Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用HEXO搭建个人博客记录"><a href="#使用HEXO搭建个人博客记录" class="headerlink" title="使用HEXO搭建个人博客记录"></a>使用HEXO搭建个人博客记录</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><ul><li>Mac环境</li></ul><hr><font size="4"><strong>1. 安装前提</strong></font><ul><li>Node.js</li><li>Git</li></ul><p>在Mac上安装这两个软件通过brew工具就可以简单完成。</p><hr><font size="4"><strong>2. 安装HEXO</strong></font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm instll -g hexo-cli</span><br></pre></td></tr></table></figure><br><br>到现在就可以开始正式使用HEXO<br><br>—<br><font size="4"><strong>3.建站</strong></font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 现在可以在电脑上建立一个文件夹作为根目录</span><br><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><br><br>完成以上后可以看到刚刚创建的目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><br><br><strong>_config.yml</strong><br><br>网站的配置信息，在此配置大部分的配置参数。<br><br><strong>package.json</strong><br><br>熟悉node.js都知道了<br><br><strong>scaffolds</strong><br><br>模板文件夹。新建文章时，Hexo会根据scaffold来建立文件。<br><br><strong>source</strong><br><br>资源文件夹是存放资源的地方。除 <strong>_posts</strong> 文件夹之外，开头命名为 <strong>_</strong> (下划线)的文件/文件夹和隐藏的文件将会被忽略。Markdown和HTML文件会被解析并放到 <strong>public</strong> 文件夹，而其他文件会被拷贝过去。<br><br><strong>theme</strong><br><br>主题文件夹。Hexo会根据主体来生成静态页面。<br><br>—-<br><font size="4"><strong>4. 和Github Page 结合</strong></font><ol><li>一个github账户</li><li>创建一个新的公开项目<br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-16/97024663.jpg" alt="image"><br>3.修改 <strong>_config.yml</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  # 写入刚刚创建的git仓库地址</span><br><span class="line">  repo: https://github.com/zhaoziqian/zhaoziqian.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>4.部署<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-deployer-git</span><br><span class="line">$ hexo clean ; hexo d</span><br><span class="line">## 等待一会就好</span><br></pre></td></tr></table></figure></p><p>访问地址确认一下部署成果<br><br><a href="https://zhaoziqian.github.io/" target="_blank" rel="noopener">zhaoziqian.github.io</a></p><hr><font size="4"><strong>5. 使用主题</strong></font><p>Hexo初始化后自带默认主题，我们也可以使用其他的三方主题(亦可以自己搞)。</p><p><strong><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hemo的主题页</a></strong><br><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-16/10028072.jpg" alt="image"><br>可以从这里选择你喜欢的主题，然后只用到自己的博客中。</p><p>选择一个主题进入到主题的github仓库，一般情况下主题作者都会写有 <strong>README.md</strong>文件描述主题如何使用。<br>主要的就是：</p><ol><li>将主题克隆到根目录下themes文件夹里</li><li>设置 <strong>_config.yml</strong> 文件中 <strong>theme: &lt;主题名称&gt; </strong> 和其他主题自带配置</li><li>重新部署</li></ol><hr><font size="4"><strong>6. 设置自己域名</strong></font><p>必备素材是拥有一个域名，怎么购买域名就说了。下面以阿里云上购买的域名为例。</p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-16/62940932.jpg" alt="image"><br>进入阿里云解析DNS,选择我们要配置的域名做如下配置</p><p><img src="http://zhaoziqian0627.oss-cn-beijing.aliyuncs.com/18-6-16/12403737.jpg" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.30.252.153  # 这两个ip是github的ip地址</span><br><span class="line">192.30.252.154</span><br><span class="line"># 然后创建一个CNAME记录，将记录值写为刚刚 GithubPage地址</span><br></pre></td></tr></table></figure><p>之后我们需要在根目录下 <strong> ./source</strong> 目录里创建 <strong> CNAME</strong> 文件，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhaoziqian.top</span><br><span class="line"># 不要http</span><br><span class="line"># 不要www</span><br></pre></td></tr></table></figure><p>设置<strong>_config.yml</strong>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: http://zhaoziqian.top</span><br></pre></td></tr></table></figure></p><p>重新部署，就可以用域名访问了  <a href="http://zhaoziqian.top/">zhaoziqian.top</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用HEXO搭建个人博客记录&quot;&gt;&lt;a href=&quot;#使用HEXO搭建个人博客记录&quot; class=&quot;headerlink&quot; title=&quot;使用HEXO搭建个人博客记录&quot;&gt;&lt;/a&gt;使用HEXO搭建个人博客记录&lt;/h3&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。
      
    
    </summary>
    
      <category term="学习分享" scheme="http://zhaoziqian.top/categories/%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="hexo" scheme="http://zhaoziqian.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Mac 系统常用软件安装工具homebrew,常用命令记录</title>
    <link href="http://zhaoziqian.top/2018/06/16/Mac-%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%B7%A5%E5%85%B7homebrew-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>http://zhaoziqian.top/2018/06/16/Mac-系统常用软件安装工具homebrew-常用命令记录/</id>
    <published>2018-06-16T03:55:44.000Z</published>
    <updated>2018-06-18T16:37:02.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mac-系统常用软件安装工具homebrew-常用命令记录"><a href="#Mac-系统常用软件安装工具homebrew-常用命令记录" class="headerlink" title="Mac-系统常用软件安装工具homebrew-常用命令记录"></a>Mac-系统常用软件安装工具homebrew-常用命令记录</h3><p>在mac系统里我们需要安装软件，除了自己下载安装包，自己安装。还有一种像是在linux系统下，apt，yum命令同样的软件安装工具那就是brew。</p><p>如何安装homebrew这里不介绍了，可以参考官网的安装指南 <strong>【<a href="https://brew.sh/" target="_blank" rel="noopener">homebrew</a>】</strong></p><p>以下记录brew使用中的常用命令</p><ol><li><strong>搜索</strong>：brew search mysql</li><li><strong>查询</strong>：brew info mysql  主要看具体的信息，比如目前的版本，依赖，安装后注意事项等</li><li><strong>更新</strong>：brew update 这会更新Homebrew自己</li><li><strong>检查过时（是否有新版本）</strong>：brew outdated 这回列出所有安装的软件里可以升级的那些</li><li><strong>升级</strong>：brew upgrade 升级所有可以升级的软件们</li><li><strong>清理</strong>：brew cleanup 清理不需要的版本极其安装包缓存</li><li><strong>卸载</strong>：brew uninstall mysql </li><li><strong>帮助</strong>：brew -h</li></ol><hr><p>除了上面这些常用的</p><p>brew list 显示已经安装的软件列表</p><p>brew outdated 查看那些已安装的程序需要更新</p><p>brew services 查看brew可以控制启动的软件</p><p>brew doctor brew的自检</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Mac-系统常用软件安装工具homebrew-常用命令记录&quot;&gt;&lt;a href=&quot;#Mac-系统常用软件安装工具homebrew-常用命令记录&quot; class=&quot;headerlink&quot; title=&quot;Mac-系统常用软件安装工具homebrew-常用命令记录&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="mac系统" scheme="http://zhaoziqian.top/categories/mac%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="mac" scheme="http://zhaoziqian.top/tags/mac/"/>
    
      <category term="brew" scheme="http://zhaoziqian.top/tags/brew/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zhaoziqian.top/2018/06/15/hello-world/"/>
    <id>http://zhaoziqian.top/2018/06/15/hello-world/</id>
    <published>2018-06-15T05:42:42.000Z</published>
    <updated>2018-06-15T08:35:57.769Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="helloworld" scheme="http://zhaoziqian.top/tags/helloworld/"/>
    
  </entry>
  
  <entry>
    <title>my first hexo page</title>
    <link href="http://zhaoziqian.top/2018/06/15/my-first-hexo-page/"/>
    <id>http://zhaoziqian.top/2018/06/15/my-first-hexo-page/</id>
    <published>2018-06-15T05:42:42.000Z</published>
    <updated>2018-06-15T07:58:01.641Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用HEXO创建的第一篇BLOG"><a href="#使用HEXO创建的第一篇BLOG" class="headerlink" title="使用HEXO创建的第一篇BLOG"></a>使用HEXO创建的第一篇BLOG</h4><hr><h1 id="致橡树"><a href="#致橡树" class="headerlink" title="致橡树"></a>致橡树</h1><p>作者：舒婷</p><p>我如果爱你——<br>绝不像攀援的凌霄花，<br>借你的高枝炫耀自己；<br>我如果爱你——<br>绝不学痴情的鸟儿，<br>为绿荫重复单调的歌曲；<br>也不止像泉源，<br>常年送来清凉的慰藉；<br>也不止像险峰，<br>增加你的高度，衬托你的威仪。<br>甚至日光，<br>甚至春雨。</p><p>不，这些都还不够！<br>我必须是你近旁的一株木棉，<br>作为树的形象和你站在一起。<br>根，紧握在地下；<br>叶，相触在云里。<br>每一阵风过，<br>我们都互相致意，<br>但没有人，<br>听懂我们的言语。<br>你有你的铜枝铁干，<br>像刀，像剑，也像戟；<br>我有我红硕的花朵，<br>像沉重的叹息，<br>又像英勇的火炬。</p><p>我们分担寒潮、风雷、霹雳；<br>我们共享雾霭、流岚、虹霓。<br>仿佛永远分离，<br>却又终身相依。<br>这才是伟大的爱情，<br>坚贞就在这里：<br>爱——<br>不仅爱你伟岸的身躯，<br>也爱你坚持的位置，<br>足下的土地。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用HEXO创建的第一篇BLOG&quot;&gt;&lt;a href=&quot;#使用HEXO创建的第一篇BLOG&quot; class=&quot;headerlink&quot; title=&quot;使用HEXO创建的第一篇BLOG&quot;&gt;&lt;/a&gt;使用HEXO创建的第一篇BLOG&lt;/h4&gt;&lt;hr&gt;
&lt;h1 id=&quot;致橡树&quot;
      
    
    </summary>
    
    
      <category term="test" scheme="http://zhaoziqian.top/tags/test/"/>
    
  </entry>
  
</feed>
